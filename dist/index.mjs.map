{"version":3,"sources":["../src/components/team-chat-interface.tsx","../src/components/button.tsx","../node_modules/clsx/dist/clsx.mjs","../src/utils/utils.ts","../src/components/avatar.tsx","../src/components/alert-dialog.tsx","../src/utils/normalize-events.ts","../src/components/sequenced-response-box.tsx","../src/utils/chat-utils.tsx","../src/components/team-event-timeline.tsx"],"sourcesContent":["import { useState, useRef, useEffect, useCallback } from 'react';\nimport { Button } from './button';\nimport ReactMarkdown from 'react-markdown';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { Loader2, AlertCircle, Users, ChevronDown, ChevronUp, Paperclip, CheckCircle, XCircle, Send, ArrowRight, Copy } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { getAccentColor } from '../utils/utils';\nimport { Avatar, AvatarFallback } from './avatar';\nimport { Link } from 'react-router-dom';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from './alert-dialog';\nimport { normalizeEvents } from '../utils/normalize-events';\nimport { TeamEventTimeline } from './team-event-timeline';\nimport { cleanMessageContent, markdownComponents } from '../utils/chat-utils';\nimport { TeamService, User } from '../types/types';\n\ninterface Message {\n  id: string;\n  content: string;\n  sender: 'user' | 'team';\n  timestamp: Date;\n  tools?: ToolCall[];\n  memberResponses?: MemberResponse[];\n  fileIds?: string[];\n  activeTools?: ActiveTool[]; // Tools currently executing\n  completedTools?: CompletedTool[]; // Tools that finished execution\n  events?: TeamEvent[]; // Event timeline\n}\n\ninterface MemberResponse {\n  member_id: string;\n  member_name?: string;\n  content: string;\n  tools?: ToolCall[];\n  model?: string;\n  created_at?: number;\n}\n\ninterface ToolCall {\n  role?: string;\n  content?: string;\n  created_at?: number;\n  metrics?: Record<string, unknown>;\n  tool_name?: string;\n  tool_call_id?: string;\n  tool_args?: Record<string, unknown>;\n  tool_call_error?: boolean;\n  name?: string;\n  output?: string;\n  arguments?: string | Record<string, unknown>;\n  input?: Record<string, unknown>;\n  timestamp?: number;\n  result?: string; // Tool execution result - this is where the main content is stored\n  requires_confirmation?: boolean;\n  confirmed?: boolean;\n  confirmation_note?: string;\n  requires_user_input?: boolean;\n  user_input_schema?: any;\n  external_execution_required?: boolean;\n  stop_after_tool_call?: boolean;\n}\n\n// New interfaces for enhanced tool tracking\ninterface ActiveTool {\n  tool_call_id: string;\n  tool_name: string;\n  tool_args: Record<string, unknown>;\n  started_at: number;\n  status: 'starting' | 'running' | 'waiting_confirmation' | 'waiting_input';\n  formatted_call?: string;\n}\n\ninterface CompletedTool {\n  tool_call_id: string;\n  tool_name: string;\n  tool_args: Record<string, unknown>;\n  result?: string;\n  error?: boolean;\n  metrics?: Record<string, unknown>;\n  started_at: number;\n  completed_at: number;\n  formatted_call?: string;\n}\n\ninterface TeamEvent {\n  type: 'RunStarted' | 'ToolCallStarted' | 'ToolCallCompleted' | 'RunResponse' | 'MemberResponse';\n  timestamp: number;\n  data?: any;\n}\n\ninterface ServerToolCall {\n  id?: string;\n  type?: string;\n  role?: string;\n  content?: string;\n  created_at?: number;\n  metrics?: Record<string, unknown>;\n  tool_name?: string;\n  tool_call_id?: string;\n  tool_args?: Record<string, unknown>;\n  tool_call_error?: boolean;\n  name?: string;\n  output?: string;\n  arguments?: string | Record<string, unknown>;\n  input?: Record<string, unknown>;\n  timestamp?: number;\n  result?: string;\n  requires_confirmation?: boolean;\n  confirmed?: boolean;\n  confirmation_note?: string;\n  requires_user_input?: boolean;\n  user_input_schema?: any;\n  external_execution_required?: boolean;\n  stop_after_tool_call?: boolean;\n  function?: {\n    name?: string;\n    arguments?: Record<string, unknown>;\n  };\n}\n\ninterface TeamChatInterfaceProps {\n  teamId: string;\n  initialSessionId?: string;\n  initialMessage?: string | null;\n  onSessionChange?: (sessionId: string) => void;\n  onMessageReceived?: () => void;\n  isHomeTeam?: boolean;\n  setVncUrl: (url: string) => void;\n  setIsIframeOpen: (open: boolean) => void;\n  teamService: TeamService;\n  useAuthStore: () => { user: User | null };\n  useCreditStore: () => { fetchBalance: () => Promise<void> };\n  useToast: () => { showToast: (message: string) => void };\n}\n\nexport const TeamChatInterface = ({\n  teamId,\n  initialSessionId,\n  initialMessage,\n  onSessionChange,\n  onMessageReceived,\n  isHomeTeam,\n  setVncUrl,\n  setIsIframeOpen,\n  teamService,\n  useAuthStore,\n  useCreditStore,\n  useToast\n}: TeamChatInterfaceProps) => {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasStreamedResponse, setHasStreamedResponse] = useState(false);\n  const [sessionId, setSessionId] = useState<string | undefined>(initialSessionId);\n  const [currentStreamingContent, setCurrentStreamingContent] = useState('');\n  const [isLoadingSession, setIsLoadingSession] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const websocketRef = useRef<{ close: () => void } | null>(null);\n  const streamingContentRef = useRef('');\n  const messagesRef = useRef<Message[]>([]);\n  const isNewlyCreatedSession = useRef<boolean>(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const [accentColor, setAccentColor] = useState<string>('from-indigo-500 to-purple-500');\n  const { user } = useAuthStore();\n  const [userHasScrolled, setUserHasScrolled] = useState(false);\n  const chatContainerRef = useRef<HTMLDivElement>(null);\n  const lastUserScrollPosition = useRef(0);\n\n  const [currentTools, setCurrentTools] = useState<ToolCall[]>([]);\n  const [activeTools, setActiveTools] = useState<ActiveTool[]>([]);\n  const [completedTools, setCompletedTools] = useState<CompletedTool[]>([]);\n  const [currentEvents, setCurrentEvents] = useState<TeamEvent[]>([]);\n  const currentToolsRef = useRef<ToolCall[]>([]);\n  const streamingMessageId = useRef<string | null>(null);\n  const currentEventsRef = useRef<TeamEvent[]>([]);\n  const { fetchBalance } = useCreditStore();\n  const [showNoCreditDialog, setShowNoCreditDialog] = useState(false);\n  const [currentMemberResponses, setCurrentMemberResponses] = useState<MemberResponse[]>([]);\n  const currentMemberResponsesRef = useRef<MemberResponse[]>([]);\n  const [hasProcessedInitialMessage, setHasProcessedInitialMessage] = useState(false);\n  const [expandedResponses, setExpandedResponses] = useState<Record<string, boolean>>({});\n  const [streamingMemberResponsesExpanded, setStreamingMemberResponsesExpanded] = useState(false);\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [uploadedFileIds, setUploadedFileIds] = useState<{ id: string; name: string; size: number }[]>([]);\n  const [uploadProgress, setUploadProgress] = useState<Record<string, number>>({});\n  const { showToast } = useToast();\n  const sessionIdRef = useRef<string | undefined>(initialSessionId);\n\n  // Helper functions - defined early so they can be used in loadSessionMessages\n  const apiTimestampToDate = (timestamp?: string | number): Date => {\n    if (!timestamp) return new Date();\n\n    if (typeof timestamp === 'string') {\n      // Try to parse ISO string first\n      const date = new Date(timestamp);\n      if (!isNaN(date.getTime())) return date;\n\n      // If that fails, try parsing as a unix timestamp\n      return new Date(parseInt(timestamp) * 1000);\n    }\n\n    // Handle numeric timestamp (assume unix timestamp in seconds)\n    return new Date(timestamp * 1000);\n  };\n\n  const getMemberDisplayName = (memberId: string, memberName?: string): string => {\n    // If we have a proper member name that's not \"Unknown Member\", use it\n    if (memberName && memberName !== \"Unknown Member\" && memberName !== \"unknown\") {\n      return memberName;\n    }\n\n    // Map member_id to proper display names\n    const memberDisplayNames: Record<string, string> = {\n      'pranalyst': 'PR Analyst',\n      'code-reviewer': 'Code Reviewer',\n      'security-auditor': 'Security Auditor',\n      'github-specialist': 'GitHub Specialist',\n      'tech-lead': 'Tech Lead',\n      'unknown': 'Team Member'\n    };\n\n    return memberDisplayNames[memberId] || memberName || memberId;\n  };\n\n  const cleanDuplicateContent = (content: string): string => {\n    if (!content) return content;\n\n    // Split content into lines for processing\n    const lines = content.split('\\n');\n    const seenLines = new Set<string>();\n    const cleanedLines: string[] = [];\n\n    for (const line of lines) {\n      const trimmedLine = line.trim();\n\n      // Skip empty lines and very short lines for deduplication\n      if (trimmedLine.length < 10) {\n        cleanedLines.push(line);\n        continue;\n      }\n\n      // Check for duplicate lines (case insensitive)\n      const normalizedLine = trimmedLine.toLowerCase();\n      if (!seenLines.has(normalizedLine)) {\n        seenLines.add(normalizedLine);\n        cleanedLines.push(line);\n      }\n    }\n\n    return cleanedLines.join('\\n').trim();\n  };\n\n  // Add global styles for animations\n  const GlobalStyle = () => (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: `\n      @keyframes pulse {\n        0%, 100% { opacity: 1; }\n        50% { opacity: 0.7; }\n      }\n      \n      @keyframes shimmer {\n        0% { background-position: 200% 0; }\n        100% { background-position: -200% 0; }\n      }\n      \n      @keyframes scale {\n        0%, 100% { transform: scale(0.7); opacity: 0.5; }\n        50% { transform: scale(1.3); opacity: 1; }\n      }\n\n      @keyframes spin {\n        from { transform: rotate(0deg); }\n        to { transform: rotate(360deg); }\n      }\n    `,\n      }}\n    />\n  );\n\n  useEffect(() => {\n    if (isHomeTeam && messages.length === 0 && !sessionId) {\n      const welcomeMessage: Message = {\n        id: 'welcome-message',\n        content: 'What kind of team do you need?',\n        sender: 'team',\n        timestamp: new Date(),\n      };\n      setMessages([welcomeMessage]);\n    }\n  }, [isHomeTeam, messages.length, sessionId]);\n\n  useEffect(() => {\n    messagesRef.current = messages;\n  }, [messages]);\n\n  useEffect(() => {\n    if (sessionId) {\n      sessionIdRef.current = sessionId;\n    }\n  }, [sessionId]);\n\n  useEffect(() => {\n    currentMemberResponsesRef.current = currentMemberResponses;\n  }, [currentMemberResponses]);\n\n  useEffect(() => {\n    if (initialSessionId !== sessionId) {\n      // Only set a new session ID if it's valid\n      if (initialSessionId && initialSessionId !== 'undefined') {\n        setSessionId(initialSessionId);\n      } else {\n        // If no valid session ID, clear messages unless it's a newly created session\n        if (!isNewlyCreatedSession.current) {\n          setMessages([]);\n          setSessionId(undefined);\n        }\n      }\n      isNewlyCreatedSession.current = false;\n    }\n  }, [initialSessionId, sessionId]);\n\n  useEffect(() => {\n    // Set a consistent accent color for this chat session\n    if (teamId && teamId !== 'undefined') {\n      setAccentColor(getAccentColor(teamId));\n    }\n  }, [teamId]);\n\n  useEffect(() => {\n    currentToolsRef.current = currentTools;\n  }, [currentTools]);\n\n  // Handle initial message - automatically send it if provided and no session exists\n  useEffect(() => {\n    if (initialMessage && !sessionId && !hasProcessedInitialMessage && !isLoading) {\n      setInput(initialMessage);\n      setHasProcessedInitialMessage(true);\n\n      // Auto-submit the initial message after a short delay\n      setTimeout(() => {\n        const form = document.querySelector('form');\n        if (form) {\n          form.dispatchEvent(new Event('submit', { bubbles: true, cancelable: true }));\n        }\n      }, 100);\n    }\n  }, [initialMessage, sessionId, hasProcessedInitialMessage, isLoading]);\n\n  const loadSessionMessages = useCallback(async (sid: string) => {\n    if (isNewlyCreatedSession.current || !sid || sid === 'undefined') return;\n    setIsLoadingSession(true);\n    try {\n      // First get session details to get team context with member interactions\n      const [sessionDetailsResponse, messagesResponse] = await Promise.all([\n        teamService.getSessionDetails(sid),\n        teamService.getSessionMessages(sid)\n      ]);\n\n      const sessionDetails = sessionDetailsResponse.data;\n      const apiMessages = messagesResponse.data;\n      const formattedMessages: Message[] = [];\n\n      // Extract member interactions from team context if available\n      const teamContext = sessionDetails.team_context || {};\n      const sessionContext = teamContext[sid] || {};\n      const memberInteractions = sessionContext.member_interactions || [];\n\n      for (let i = 0; i < apiMessages.length; i++) {\n        const msg = apiMessages[i];\n\n        // Skip system messages\n        if (msg.role === 'system') continue;\n\n        // Handle user messages\n        if (msg.role === 'user') {\n          formattedMessages.push({\n            id: `message-${msg.created_at || Date.now()}-${Math.random().toString(36).slice(2, 9)}`,\n            content: msg.content || '',\n            sender: 'user',\n            timestamp: apiTimestampToDate(msg.created_at),\n          });\n          continue;\n        }\n\n        // Handle team/assistant messages\n        if (msg.role === 'assistant' || msg.role === 'team_response') {\n          // Check for duplicate timestamp (handle multiple team_response messages from same turn)\n          const existingMessageIndex = formattedMessages.findIndex(existingMsg =>\n            existingMsg.sender === 'team' &&\n            Math.abs(apiTimestampToDate(msg.created_at).getTime() - existingMsg.timestamp.getTime()) < 1000\n          );\n\n          // If we find a message with the same timestamp, merge them\n          if (existingMessageIndex !== -1) {\n            const existingMessage = formattedMessages[existingMessageIndex];\n\n            // Prefer assistant over team_response for timestamp\n            if (msg.role === 'assistant') {\n              existingMessage.timestamp = apiTimestampToDate(msg.created_at);\n            }\n\n            // Choose the better content (prefer longer, more detailed content)\n            const newContent = msg.content || '';\n            const existingContent = existingMessage.content || '';\n\n            // Smart content selection to prevent concatenation artifacts\n            // Only replace if new content is significantly longer and more detailed\n            if (newContent.length > existingContent.length * 1.5 ||\n              (newContent.length > 100 && existingContent.length < 50)) {\n              // Check if the new content looks like it contains the existing content (concatenation artifact)\n              if (!newContent.includes(existingContent.substring(0, Math.min(100, existingContent.length)))) {\n                existingMessage.content = newContent;\n              }\n            }\n            // If new content is much shorter but existing is very short, might be a better summary\n            else if (existingContent.length < 20 && newContent.length > 20) {\n              existingMessage.content = newContent;\n            }\n            // Prefer team_response content over assistant content when they're similar length\n            else if (msg.role === 'team_response' && Math.abs(newContent.length - existingContent.length) < 100) {\n              existingMessage.content = newContent;\n            }\n\n            // Merge member responses if available (don't duplicate)\n            if (msg.member_responses && Array.isArray(msg.member_responses) && msg.member_responses.length > 0) {\n              const memberResponses = msg.member_responses.map((response: any) => ({\n                member_id: response.agent_id || response.member_id || 'unknown',\n                member_name: getMemberDisplayName(response.agent_id || response.member_id || 'unknown', response.member_name || response.agent_name),\n                content: cleanDuplicateContent(response.content || ''),\n                tools: response.tools || []\n              }));\n\n              // Only add member responses if we don't already have them\n              if (!existingMessage.memberResponses || existingMessage.memberResponses.length === 0) {\n                existingMessage.memberResponses = memberResponses;\n              }\n            }\n\n            // Merge tools if available (avoid duplicates)\n            if (msg.tool_calls && Array.isArray(msg.tool_calls)) {\n              const newTools: ToolCall[] = [];\n              msg.tool_calls.forEach((toolCall: ServerToolCall) => {\n                const functionData = toolCall.function || {};\n                newTools.push({\n                  role: (toolCall.role as string) || 'tool',\n                  content: (toolCall.content as string) || '',\n                  created_at: toolCall.created_at as number,\n                  metrics: (toolCall.metrics as Record<string, unknown>) || {},\n                  tool_name:\n                    (functionData.name as string) ||\n                    (toolCall.tool_name as string) ||\n                    (toolCall.name as string) ||\n                    '',\n                  tool_call_id:\n                    (toolCall.id as string) ||\n                    (toolCall.tool_call_id as string) ||\n                    `tool-${toolCall.created_at || Date.now()}`,\n                  tool_args:\n                    (functionData.arguments as Record<string, unknown>) ||\n                    (toolCall.tool_args as Record<string, unknown>) ||\n                    (toolCall.arguments as Record<string, unknown>) ||\n                    {},\n                  tool_call_error: (toolCall.tool_call_error as boolean) || false,\n                  name: (functionData.name as string) || (toolCall.name as string) || '',\n                  output: (toolCall.output as string) || '',\n                  arguments: functionData.arguments || toolCall.arguments || {},\n                  input: (toolCall.input as Record<string, unknown>) || {},\n                  timestamp: (toolCall.timestamp as number) || (toolCall.created_at as number),\n                });\n              });\n\n              if (newTools.length > 0 && (!existingMessage.tools || existingMessage.tools.length === 0)) {\n                existingMessage.tools = newTools;\n              }\n            }\n\n            continue; // Skip creating a new message\n          }\n\n          // If no duplicate timestamp found, check for duplicate content as before\n          const currentContent = (msg.content || '').trim();\n\n          // Check for exact content duplication\n          const isDuplicateContent = formattedMessages.some(existingMsg =>\n            existingMsg.sender === 'team' &&\n            existingMsg.content.trim() === currentContent\n          );\n\n          // Check for similar content (potential duplicates with minor variations)\n          const isSimilarContent = formattedMessages.some(existingMsg => {\n            if (existingMsg.sender !== 'team') return false;\n            const existingContent = existingMsg.content.trim();\n\n            // Skip if either content is too short to compare meaningfully\n            if (existingContent.length < 50 || currentContent.length < 50) return false;\n\n            // Check if one content contains most of the other (80% overlap)\n            const shorterContent = existingContent.length < currentContent.length ? existingContent : currentContent;\n            const longerContent = existingContent.length >= currentContent.length ? existingContent : currentContent;\n\n            return longerContent.includes(shorterContent.substring(0, Math.min(200, shorterContent.length * 0.8)));\n          });\n\n          // If this is an assistant message and we already have the same/similar content as team_response, skip it\n          if (msg.role === 'assistant' && (isDuplicateContent || isSimilarContent)) {\n            continue;\n          }\n\n          // If this is a team_response and we have an assistant message with same/similar content, replace it\n          if (msg.role === 'team_response') {\n            const duplicateIndex = formattedMessages.findIndex(existingMsg =>\n              existingMsg.sender === 'team' &&\n              (existingMsg.content.trim() === currentContent ||\n                (existingMsg.content.length > 50 && currentContent.length > 50 &&\n                  currentContent.includes(existingMsg.content.substring(0, Math.min(200, existingMsg.content.length * 0.8)))))\n            );\n\n            if (duplicateIndex !== -1) {\n              // Remove the duplicate/similar message, we'll replace it with this team_response\n              formattedMessages.splice(duplicateIndex, 1);\n            }\n          }\n\n          // Convert tool_calls to tools format\n          const tools: ToolCall[] = [];\n          if (msg.tool_calls && Array.isArray(msg.tool_calls)) {\n            msg.tool_calls.forEach((toolCall: ServerToolCall) => {\n              const functionData = toolCall.function || {};\n              tools.push({\n                role: (toolCall.role as string) || 'tool',\n                content: (toolCall.content as string) || '',\n                created_at: toolCall.created_at as number,\n                metrics: (toolCall.metrics as Record<string, unknown>) || {},\n                tool_name:\n                  (functionData.name as string) ||\n                  (toolCall.tool_name as string) ||\n                  (toolCall.name as string) ||\n                  '',\n                tool_call_id:\n                  (toolCall.id as string) ||\n                  (toolCall.tool_call_id as string) ||\n                  `tool-${toolCall.created_at || Date.now()}`,\n                tool_args:\n                  (functionData.arguments as Record<string, unknown>) ||\n                  (toolCall.tool_args as Record<string, unknown>) ||\n                  (toolCall.arguments as Record<string, unknown>) ||\n                  {},\n                tool_call_error: (toolCall.tool_call_error as boolean) || false,\n                name: (functionData.name as string) || (toolCall.name as string) || '',\n                output: (toolCall.output as string) || '',\n                arguments: functionData.arguments || toolCall.arguments || {},\n                input: (toolCall.input as Record<string, unknown>) || {},\n                timestamp: (toolCall.timestamp as number) || (toolCall.created_at as number),\n              });\n            });\n          }\n\n          // Use member_responses from the message if available, otherwise use from team context\n          let memberResponses: MemberResponse[] = [];\n          let mainContent = msg.content || '';\n\n          if (msg.member_responses && Array.isArray(msg.member_responses)) {\n            memberResponses = msg.member_responses.map((response: any) => ({\n              member_id: response.agent_id || response.member_id || 'unknown',\n              member_name: getMemberDisplayName(response.agent_id || response.member_id || 'unknown', response.member_name || response.agent_name),\n              content: cleanDuplicateContent(response.content || ''),\n              tools: response.tools || []\n            }));\n\n            // For team_response messages, the content is already the coordinator's summary\n            // Only clean for assistant messages where content might contain embedded member responses\n            if (msg.role === 'assistant' && memberResponses.length > 0) {\n              // Check if the main content contains member response content and clean it up\n              let cleanedContent = mainContent;\n\n              // Remove UUID patterns at the beginning\n              cleanedContent = cleanedContent.replace(/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}[\\s\\n]*/gi, '').trim();\n\n              // Look for patterns that indicate member response content is embedded\n              memberResponses.forEach(memberResponse => {\n                if (memberResponse.content && memberResponse.content.length > 50) {\n                  const memberContent = memberResponse.content.trim();\n\n                  // Check if the member content is included\n                  if (cleanedContent.includes(memberContent)) {\n                    // Remove the member content entirely\n                    cleanedContent = cleanedContent.replace(memberContent, '').trim();\n                  } else {\n                    // Try to find partial matches (first 200 characters)\n                    const memberContentStart = memberContent.substring(0, 200);\n                    if (cleanedContent.includes(memberContentStart)) {\n                      const startIndex = cleanedContent.indexOf(memberContentStart);\n                      cleanedContent = cleanedContent.substring(0, startIndex).trim();\n                    }\n                  }\n                }\n              });\n\n              // Clean up any remaining artifacts\n              cleanedContent = cleanedContent\n                .replace(/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/gi, '')\n                .replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n')\n                .trim();\n\n              // Use cleaned content if it's reasonable, otherwise keep original\n              if (cleanedContent.length > 10 || mainContent.length < 100) {\n                mainContent = cleanedContent;\n              }\n            }\n            // For team_response messages, don't clean the content - it's already the coordinator's summary\n          } else if (memberInteractions.length > 0) {\n            // Fallback to team context member interactions\n            memberResponses = memberInteractions.map((interaction: any) => ({\n              member_id: interaction.member_name || 'Unknown Member',\n              content: interaction.response?.content || interaction.task || '',\n              tools: interaction.response?.tools || []\n            }));\n          }\n\n          // Check if the last message was also from the team and merge if so\n          const lastMessage = formattedMessages[formattedMessages.length - 1];\n          if (lastMessage && lastMessage.sender === 'team') {\n            // Smart content merging - choose the better content instead of concatenating\n            const newContent = mainContent.trim();\n            const existingContent = lastMessage.content.trim();\n\n            // Smart content selection to prevent concatenation artifacts\n            // Only replace if new content is significantly longer and more detailed\n            if (newContent.length > existingContent.length * 1.5 ||\n              (newContent.length > 100 && existingContent.length < 50)) {\n              // Check if the new content looks like it contains the existing content (concatenation artifact)\n              if (!newContent.includes(existingContent.substring(0, Math.min(100, existingContent.length)))) {\n                lastMessage.content = newContent;\n              }\n            }\n            // If new content is much shorter but existing is very short, might be a better summary\n            else if (existingContent.length < 20 && newContent.length > 20) {\n              lastMessage.content = newContent;\n            }\n            // Prefer team_response content over assistant content when they're similar length\n            else if (msg.role === 'team_response' && Math.abs(newContent.length - existingContent.length) < 100) {\n              lastMessage.content = newContent;\n            }\n\n            // Merge tools without duplicates\n            if (tools.length > 0) {\n              const existingToolIds = (lastMessage.tools || []).map(t => t.tool_call_id);\n              const newTools = tools.filter(t => !existingToolIds.includes(t.tool_call_id));\n              if (newTools.length > 0) {\n                lastMessage.tools = [...(lastMessage.tools || []), ...newTools];\n              }\n            }\n\n            // Merge member responses without duplicates\n            if (memberResponses.length > 0) {\n              const existingMemberIds = (lastMessage.memberResponses || []).map(m => m.member_id);\n              const newMemberResponses = memberResponses.filter(m => !existingMemberIds.includes(m.member_id));\n              if (newMemberResponses.length > 0) {\n                lastMessage.memberResponses = [...(lastMessage.memberResponses || []), ...newMemberResponses];\n              }\n            }\n          } else {\n            // Create a new team message\n            const teamMessage: Message = {\n              id: `message-${msg.created_at || Date.now()}-${Math.random()\n                .toString(36)\n                .slice(2, 9)}`,\n              content: mainContent,\n              sender: 'team',\n              timestamp: apiTimestampToDate(msg.created_at),\n              tools: tools.length > 0 ? tools : msg.tools || [],\n              // Use member responses from message or context\n              memberResponses: memberResponses.length > 0 ? memberResponses : undefined,\n            };\n\n            formattedMessages.push(teamMessage);\n          }\n          continue;\n        }\n      }\n\n      // Sort messages by timestamp to ensure chronological order\n      formattedMessages.sort((a, b) => {\n        const timeA = a.timestamp.getTime();\n        const timeB = b.timestamp.getTime();\n\n        // If timestamps are very close (within 1 second), prioritize user messages before team messages\n        if (Math.abs(timeA - timeB) < 1000) {\n          if (a.sender === 'user' && b.sender === 'team') return -1;\n          if (a.sender === 'team' && b.sender === 'user') return 1;\n        }\n\n        return timeA - timeB;\n      });\n\n      const finalMessages: Message[] = [];\n      let updatedMessages = formattedMessages;\n\n      if (isHomeTeam) {\n        const lastTeamMessage = [...finalMessages].reverse().find(\n          msg => msg.sender === 'team' && typeof msg.content === 'string'\n        );\n        if (lastTeamMessage && lastTeamMessage.content) {\n          const teamIdMatch = lastTeamMessage.content.match(\n            /team[\\s_-]*id[^a-f0-9]*([a-f0-9]{24})/i\n          );\n\n          const fallbackUrlMatch = lastTeamMessage.content.match(\n            /\\/teams\\/([a-f0-9]{24})\\/chat/i\n          );\n\n          const extractedTeamId = teamIdMatch?.[1] || fallbackUrlMatch?.[1];\n\n          if (extractedTeamId && !finalMessages.some(msg => msg.content === `followup::${extractedTeamId}`)) {\n            const followUpMessage: Message = {\n              id: `follow-up-${Date.now()}`,\n              content: `followup::${extractedTeamId}`,\n              sender: 'team',\n              timestamp: new Date(),\n            };\n\n            updatedMessages = [...finalMessages, followUpMessage];\n          }\n        }\n      }\n\n      setMessages(updatedMessages);\n    } catch (error) {\n      console.error('Error loading session messages:', error);\n    } finally {\n      setIsLoadingSession(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (\n      sessionId &&\n      sessionId !== 'undefined' &&\n      !isNewlyCreatedSession.current\n    ) {\n      loadSessionMessages(sessionId);\n    }\n  }, [sessionId, loadSessionMessages]);\n\n  const detectVncUrl = (output: string) => {\n    if (!output) return;\n\n    try {\n      const jsonMatches = output.match(/({[^{}]*\"vnc_url\"\\s*:\\s*\"[^\"]*\"[^{}]*})/g);\n      if (jsonMatches) {\n        for (const match of jsonMatches) {\n          try {\n            const parsed = JSON.parse(match);\n            if (parsed.vnc_url && parsed.vnc_url.trim() !== \"\") {\n              let finalUrl = parsed.vnc_url;\n              if (!finalUrl.includes('view_only=true')) {\n                finalUrl += (finalUrl.includes('?') ? '&' : '?') + 'view_only=true';\n              }\n              console.log('Found VNC URL in JSON:', finalUrl);\n              setVncUrl(finalUrl);\n              setIsIframeOpen(true);\n              return;\n            }\n          } catch (err) {\n            console.warn('Failed to parse JSON block:', err);\n          }\n        }\n      }\n\n      const markdownVncMatch = output.match(/\\(https:\\/\\/[^\\s)]+\\/vnc\\.html[^\\s)]*\\)/);\n      if (markdownVncMatch) {\n        const url = markdownVncMatch[0].slice(1, -1);\n        let finalUrl = url;\n        if (!finalUrl.includes('view_only=true')) {\n          finalUrl += (finalUrl.includes('?') ? '&' : '?') + 'view_only=true';\n        }\n        console.log('Found VNC URL in markdown:', finalUrl);\n        setVncUrl(finalUrl);\n        setIsIframeOpen(true);\n      }\n\n    } catch (err) {\n      console.warn('Error while processing output for VNC URL:', err);\n    }\n  };\n\n  useEffect(() => {\n    for (const msg of messages) {\n      if (!msg.memberResponses) continue;\n      for (const member of msg.memberResponses) {\n        for (const tool of member.tools || []) {\n          const text = tool.output || tool.result;\n          if (typeof text === 'string') {\n            detectVncUrl(text);\n          }\n        }\n      }\n    }\n  }, [messages]);\n\n  const cleanupWebSocket = () => {\n    if (websocketRef.current) {\n      websocketRef.current.close();\n      websocketRef.current = null;\n    }\n  };\n\n  const handleUserMessageSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!input.trim() || isLoading) return;\n\n    // Prevent sending message if files are still uploading\n    const hasPendingUploads = selectedFiles.length > 0;\n    if (hasPendingUploads) {\n      showToast('Please wait for file uploads to complete.');\n      return;\n    }\n\n    const userMessageId = `user-${Date.now()}`;\n    const userMessage: Message = {\n      id: userMessageId,\n      content: input,\n      sender: 'user',\n      timestamp: new Date(),\n      fileIds: uploadedFileIds.length > 0 ? uploadedFileIds.map(f => f.id) : undefined,\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n    setHasStreamedResponse(true);\n\n    // Reset all streaming states\n    setCurrentTools([]);\n    setActiveTools([]);\n    setCompletedTools([]);\n    setCurrentEvents([]);\n    // setFormattedToolCalls([]);\n    setCurrentMemberResponses([]);\n    setCurrentStreamingContent('');\n    streamingContentRef.current = '';\n\n    // Focus the input for the next message\n    setTimeout(() => textareaRef.current?.focus(), 0);\n\n    // Create a new message object for the agent's response\n    const responseId = `team-${Date.now()}`;\n    streamingMessageId.current = responseId;\n\n    try {\n      const fileIds = uploadedFileIds.map(f => f.id);\n\n      // Create the streaming connection\n      const sessionToUse = sessionIdRef.current || sessionId;\n      const connection = teamService.chatWithTeamStream(\n        teamId,\n        input,\n        sessionToUse,\n        (content) => {\n          // Skip \"Run started\" messages\n          if (!content || content.trim() === 'Run started' || content.includes('Run started')) {\n            return;\n          }\n\n          // Remove any \"Run started\" prefix if it's part of a larger message\n          const cleanedContent = content.replace(/^Run started\\s*/, '');\n\n          streamingContentRef.current += cleanedContent;\n          setCurrentStreamingContent(streamingContentRef.current);\n        },\n        (toolEvent, data) => {\n          // Enhanced tool event handling with better state tracking\n          console.log('Tool event received:', toolEvent, data);\n\n          // Skip RunCompleted events to prevent content duplication\n          if (toolEvent === 'RunCompleted') {\n            console.log('Skipping RunCompleted tool event to prevent duplication');\n            return;\n          }\n\n          // Add event to timeline\n          const newEvent: TeamEvent = {\n            type: toolEvent as any,\n            timestamp: Date.now(),\n            data: data\n          };\n          setCurrentEvents(prev => {\n            const updated = [...prev, newEvent];\n            currentEventsRef.current = updated;\n            return updated;\n          });\n\n          if (toolEvent === 'ToolCallStarted') {\n            // Handle tool started events\n            if (data.tools && Array.isArray(data.tools)) {\n              const newActiveTools: ActiveTool[] = data.tools.map((tool: any) => ({\n                tool_call_id: tool.tool_call_id || `tool-${Date.now()}`,\n                tool_name: tool.tool_name || tool.name || 'Unknown Tool',\n                tool_args: tool.tool_args || tool.arguments || {},\n                started_at: tool.created_at || Date.now(),\n                status: 'starting' as const,\n              }));\n\n              setActiveTools(prev => {\n                const existing = prev.filter(t =>\n                  !newActiveTools.some(nt => nt.tool_call_id === t.tool_call_id)\n                );\n                return [...existing, ...newActiveTools];\n              });\n            }\n\n            if (data.active_tool) {\n              const activeTool: ActiveTool = {\n                tool_call_id: data.active_tool.tool_call_id || `tool-${Date.now()}`,\n                tool_name: data.active_tool.tool_name || data.active_tool.name || 'Unknown Tool',\n                tool_args: data.active_tool.tool_args || data.active_tool.arguments || {},\n                started_at: data.active_tool.created_at || Date.now(),\n                status: 'running' as const,\n              };\n\n              setActiveTools(prev => {\n                const filtered = prev.filter(t => t.tool_call_id !== activeTool.tool_call_id);\n                return [...filtered, activeTool];\n              });\n            }\n          } else if (toolEvent === 'ToolCallCompleted') {\n            // Handle tool completion events\n            console.log('Processing ToolCallCompleted event:', data);\n\n            // Handle individual tool completion from the response\n            if (data.tools && Array.isArray(data.tools)) {\n              const completedToolsList: CompletedTool[] = data.tools\n                .filter((tool: any) => tool.result !== null && tool.result !== undefined)\n                .map((tool: any) => ({\n                  tool_call_id: tool.tool_call_id || `tool-${Date.now()}`,\n                  tool_name: tool.tool_name || tool.name || 'Unknown Tool',\n                  tool_args: tool.tool_args || tool.arguments || {},\n                  result: tool.result,\n                  error: tool.tool_call_error || false,\n                  metrics: tool.metrics || {},\n                  started_at: tool.created_at || Date.now(),\n                  completed_at: Date.now(),\n                }));\n\n              setCompletedTools(prev => {\n                const existing = prev.filter(t =>\n                  !completedToolsList.some(ct => ct.tool_call_id === t.tool_call_id)\n                );\n                return [...existing, ...completedToolsList];\n              });\n\n              // Remove from active tools\n              const completedIds = completedToolsList.map(t => t.tool_call_id);\n              setActiveTools(prev => prev.filter(t => !completedIds.includes(t.tool_call_id)));\n            }\n\n            // Handle single tool completion directly from event data\n            else if (data.tool_call_id && data.result) {\n              const completedTool: CompletedTool = {\n                tool_call_id: data.tool_call_id,\n                tool_name: data.tool_name || 'Unknown Tool',\n                tool_args: data.tool_args || {},\n                result: data.result,\n                error: data.tool_call_error || false,\n                metrics: data.metrics || {},\n                started_at: data.created_at || Date.now(),\n                completed_at: Date.now(),\n              };\n\n              setCompletedTools(prev => {\n                const existing = prev.filter(t => t.tool_call_id !== completedTool.tool_call_id);\n                return [...existing, completedTool];\n              });\n\n              // Remove from active tools\n              setActiveTools(prev => prev.filter(t => t.tool_call_id !== completedTool.tool_call_id));\n            }\n          }\n\n          // Legacy handling for backwards compatibility\n          if (toolEvent === 'ToolsArray' && data.tools) {\n            setCurrentTools((prev) => [...prev, ...data.tools]);\n            // setShowToolsInMessage(true);\n          } else if (toolEvent === 'ToolCall' && data) {\n            setCurrentTools((prev) => [...prev, data]);\n            // setShowToolsInMessage(true);\n\n            const text = data.output || data.result;\n            if (typeof text === 'string') {\n              detectVncUrl(text);\n            }\n\n          } else if (data && typeof data === 'object') {\n            // Handle chunked events with tools array\n            if (data.tools && Array.isArray(data.tools)) {\n              console.log('Processing tools array from event:', data.tools);\n\n              setCurrentTools((prev) => {\n                const newTools = [...prev];\n\n                // Process each tool in the array\n                data.tools.forEach((tool: ToolCall) => {\n                  const toolExists = newTools.some(\n                    (t) =>\n                      t.tool_call_id === tool.tool_call_id ||\n                      t.tool_name === tool.tool_name ||\n                      t.tool_name === tool.name\n                  );\n\n                  if (!toolExists) {\n                    newTools.push({\n                      role: tool.role || 'tool',\n                      tool_name: tool.tool_name || tool.name || '',\n                      tool_call_id:\n                        tool.tool_call_id ||\n                        `tool-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`,\n                      tool_args:\n                        tool.tool_args ||\n                        (typeof tool.arguments === 'object' && tool.arguments !== null\n                          ? tool.arguments\n                          : {}) ||\n                        {},\n                      content: tool.content || tool.output || '',\n                      created_at: tool.created_at || Date.now(),\n                      metrics: tool.metrics || { time: 0 },\n                    });\n                  }\n                });\n\n                return newTools;\n              });\n            }\n\n            // Handle active_tool data\n            if (data.active_tool) {\n              const tool: ToolCall = data.active_tool;\n              setCurrentTools((prev) => {\n                const toolExists = prev.some(\n                  (t) =>\n                    t.tool_call_id === tool.tool_call_id ||\n                    t.tool_name === tool.tool_name ||\n                    t.tool_name === tool.name\n                );\n\n                if (!toolExists) {\n                  return [\n                    ...prev,\n                    {\n                      role: tool.role || 'tool',\n                      tool_name: tool.tool_name || tool.name || '',\n                      tool_call_id:\n                        tool.tool_call_id ||\n                        `tool-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`,\n                      tool_args:\n                        tool.tool_args ||\n                        (typeof tool.arguments === 'object' && tool.arguments !== null\n                          ? tool.arguments\n                          : {}) ||\n                        {},\n                      content: tool.content || tool.output || '',\n                      created_at: tool.created_at || Date.now(),\n                      metrics: tool.metrics || { time: 0 },\n                    },\n                  ];\n                }\n\n                return prev;\n              });\n            }\n\n            // Handle member_responses data\n            if (\n              data.member_responses &&\n              Array.isArray(data.member_responses) &&\n              data.member_responses.length > 0\n            ) {\n              console.log('Processing member responses from event:', data.member_responses);\n              const formattedMemberResponses = data.member_responses.map((response: any) => ({\n                member_id: response.agent_id || response.member_id || 'unknown',\n                member_name: getMemberDisplayName(response.agent_id || response.member_id || 'unknown', response.member_name || response.agent_name),\n                content: cleanDuplicateContent(response.content || ''),\n                tools: response.tools || [],\n                model: response.model || 'Unknown',\n                created_at: response.created_at || Date.now(),\n              }));\n              setCurrentMemberResponses(formattedMemberResponses);\n            }\n          }\n        },\n        (memberResponses) => {\n          const formattedMemberResponses = memberResponses.map((response: any) => ({\n            member_id: response.agent_id || response.member_id || 'unknown',\n            member_name: getMemberDisplayName(response.agent_id || response.member_id || 'unknown', response.member_name || response.agent_name),\n            content: cleanDuplicateContent(response.content || ''),\n            tools: response.tools || [],\n            model: response.model || 'Unknown',\n            created_at: response.created_at || Date.now(),\n          }));\n          setCurrentMemberResponses(formattedMemberResponses);\n        },\n        (newSessionId) => {\n          // Handle completion\n          const finalContent = streamingContentRef.current;\n\n          const teamMessage: Message = {\n            id: responseId,\n            content: finalContent,\n            sender: 'team',\n            timestamp: new Date(), // Will be updated when we reload messages from backend\n            tools: currentToolsRef.current,\n            memberResponses: currentMemberResponsesRef.current,\n            activeTools: activeTools,\n            completedTools: completedTools,\n            events: currentEventsRef.current,\n          };\n\n          // Update with the final message\n          setMessages((prev) => {\n            const filtered = prev.filter((msg) => msg.id !== responseId);\n            return [...filtered, teamMessage];\n          });\n\n          if (isHomeTeam) {\n            const teamIdMatch = finalContent.match(\n              /team[\\s_-]*id[^a-f0-9]*([a-f0-9]{24})/i\n            );\n\n            const fallbackUrlMatch = finalContent.match(\n              /\\/teams\\/([a-f0-9]{24})\\/chat/i\n            );\n\n            const extractedTeamId = teamIdMatch?.[1] || fallbackUrlMatch?.[1];\n            if (extractedTeamId) {\n              const followUpMessage: Message = {\n                id: `follow-up-${Date.now()}`,\n                content: `followup::${extractedTeamId}`, // special pattern\n                sender: 'team',\n                timestamp: new Date(),\n              };\n\n              setMessages(prev => [...prev, followUpMessage]);\n            }\n          }\n\n          if (newSessionId && (!sessionId || sessionId !== newSessionId)) {\n            setSessionId(newSessionId);\n            isNewlyCreatedSession.current = true;\n            if (onSessionChange) {\n              onSessionChange(newSessionId);\n            }\n          }\n\n          setIsLoading(false);\n          setHasStreamedResponse(false);\n          streamingContentRef.current = '';\n          setCurrentTools([]);\n          setActiveTools([]);\n          setCompletedTools([]);\n          setCurrentMemberResponses([]);\n          setSelectedFiles([]);\n          setUploadedFileIds([]);\n\n          // Update credits after completion\n          fetchBalance();\n\n          // Reload messages from backend to get accurate timestamps\n          if (uploadedFileIds.length > 0 && (newSessionId || sessionId)) {\n            setTimeout(() => {\n              const targetSessionId = newSessionId || sessionId;\n              if (targetSessionId) {\n                loadSessionMessages(targetSessionId);\n              }\n            }, 500); // Small delay to ensure backend has processed the message\n          }\n\n          if (onMessageReceived) {\n            onMessageReceived();\n          }\n        },\n        (errorMessage) => {\n          // Enhanced error handling for team execution\n          console.error('Error in chat stream:', errorMessage);\n          setIsLoading(false);\n\n          // Try to parse error as JSON if it contains structured error info\n          let errorDetails = null;\n          try {\n            if (typeof errorMessage === 'string' && (errorMessage.includes('{') || errorMessage.includes('error_code'))) {\n              // Try to extract JSON from error message\n              const jsonMatch = errorMessage.match(/\\{.*\\}/);\n              if (jsonMatch) {\n                errorDetails = JSON.parse(jsonMatch[0]);\n              }\n            } else if (typeof errorMessage === 'object') {\n              errorDetails = errorMessage;\n            }\n          } catch (e) {\n            // If parsing fails, treat as string\n            console.warn('Could not parse error details:', e);\n          }\n\n          // Handle structured error responses\n          if (errorDetails && errorDetails.error_code) {\n            if (errorDetails.error_code.includes('credits') || errorDetails.error_code === 'insufficient_credits') {\n              setShowNoCreditDialog(true);\n              return;\n            }\n\n            // Show user-friendly error message with recovery options\n            const errorContent = errorDetails.message || 'An error occurred while processing your request.';\n            const suggestions = errorDetails.suggestions || [];\n            const recoveryOptions = errorDetails.recovery_options || [];\n\n            // Add error message to chat for user visibility\n            const errorTeamMessage: Message = {\n              id: `error-${Date.now()}`,\n              content: errorContent,\n              sender: 'team',\n              timestamp: new Date(),\n              tools: [],\n              memberResponses: [],\n            };\n\n            setMessages((prev) => [...prev, errorTeamMessage]);\n\n            // Log suggestions for potential future UI improvements\n            if (suggestions.length > 0) {\n              console.info('Error suggestions:', suggestions);\n            }\n            if (recoveryOptions.length > 0) {\n              console.info('Recovery options:', recoveryOptions);\n            }\n\n            return;\n          }\n\n          // Handle legacy credit errors (string-based)\n          if (typeof errorMessage === 'string' && (errorMessage.includes('credits') || errorMessage.includes('balance'))) {\n            setShowNoCreditDialog(true);\n            return;\n          }\n\n          // Handle generic errors with user-friendly messaging\n          const genericErrorMessage = typeof errorMessage === 'string'\n            ? (errorMessage.includes('rate limit') || errorMessage.includes('quota')\n              ? 'The AI service is currently busy. Please wait a moment and try again.'\n              : errorMessage.includes('connection') || errorMessage.includes('timeout')\n                ? 'Unable to connect to the AI service. Please check your connection and try again.'\n                : 'The team encountered an issue while processing your request. Please try again.')\n            : 'An unexpected error occurred. Please try again.';\n\n          // Add generic error message to chat\n          const genericErrorTeamMessage: Message = {\n            id: `error-${Date.now()}`,\n            content: genericErrorMessage,\n            sender: 'team',\n            timestamp: new Date(),\n            tools: [],\n            memberResponses: [],\n          };\n\n          setMessages((prev) => [...prev, genericErrorTeamMessage]);\n        },\n        fileIds\n      );\n\n      // Store the WebSocket connection\n      websocketRef.current = connection;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setIsLoading(false);\n\n      // Enhanced error handling for team API errors\n      let errorMessage = 'An unexpected error occurred. Please try again.';\n      let shouldShowCreditDialog = false;\n\n      // Handle structured error responses from the API\n      if (error && typeof error === 'object') {\n        // Handle HTTP error responses\n        if ('response' in error && error.response && typeof error.response === 'object') {\n          try {\n            const errorData = (error.response as any).data;\n\n            // Handle structured error responses\n            if (errorData && typeof errorData === 'object') {\n              if (errorData.error_code) {\n                if (errorData.error_code.includes('credits') || errorData.error_code === 'insufficient_credits') {\n                  shouldShowCreditDialog = true;\n                } else {\n                  errorMessage = errorData.message || errorMessage;\n                }\n              } else if (errorData.message) {\n                errorMessage = errorData.message;\n              } else if (errorData.detail) {\n                // Handle FastAPI detail responses\n                if (typeof errorData.detail === 'object' && errorData.detail.message) {\n                  errorMessage = errorData.detail.message;\n                  if (errorData.detail.error_code && errorData.detail.error_code.includes('credits')) {\n                    shouldShowCreditDialog = true;\n                  }\n                } else if (typeof errorData.detail === 'string') {\n                  errorMessage = errorData.detail;\n                }\n              }\n            } else if (typeof errorData === 'string') {\n              errorMessage = errorData;\n            }\n          } catch (parseError) {\n            console.warn('Could not parse error response:', parseError);\n          }\n        } else if ('message' in error && typeof error.message === 'string') {\n          errorMessage = error.message;\n        }\n      } else if (typeof error === 'string') {\n        errorMessage = error;\n      }\n\n      // Handle credit-related errors\n      if (shouldShowCreditDialog ||\n        (typeof errorMessage === 'string' &&\n          (errorMessage.includes('credits') || errorMessage.includes('balance')))) {\n        setShowNoCreditDialog(true);\n        return;\n      }\n\n      // Provide user-friendly error messages for common cases\n      if (typeof errorMessage === 'string') {\n        if (errorMessage.includes('rate limit') || errorMessage.includes('quota')) {\n          errorMessage = 'The AI service is currently busy. Please wait a moment and try again.';\n        } else if (errorMessage.includes('connection') || errorMessage.includes('timeout') || errorMessage.includes('network')) {\n          errorMessage = 'Unable to connect to the AI service. Please check your connection and try again.';\n        } else if (errorMessage.includes('model') && errorMessage.includes('not found')) {\n          errorMessage = 'The AI model is temporarily unavailable. Please try again later.';\n        }\n      }\n\n      // Add error message to chat for user visibility\n      const errorTeamMessage: Message = {\n        id: `error-${Date.now()}`,\n        content: errorMessage,\n        sender: 'team',\n        timestamp: new Date(),\n        tools: [],\n        memberResponses: [],\n      };\n\n      setMessages((prev) => [...prev, errorTeamMessage]);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleUserMessageSubmit(e);\n    }\n  };\n\n  const renderMessageContent = (message: Message) => {\n    if (message.sender === 'user') {\n      return <div className='whitespace-pre-wrap break-words'>{message.content}</div>;\n    }\n\n    if (message.content.startsWith('followup::')) {\n      const teamId = message.content.replace('followup::', '');\n\n      return (\n        <div className=\"p-2 pt-4 pb-4\">\n          <h2 className=\"text-xl font-bold text-foreground mb-1\">What's next?</h2>\n          <p className=\"text-muted-foreground text-base mb-4\">\n            Go to the team room and give them instructions\n          </p>\n          <Link\n            to={`/teams/${teamId}/chat`}\n            className=\"form-button text-white font-medium px-6 py-3 sm:px-8 sm:py-4 rounded-full flex items-center justify-center gap-2 transition-colors duration-200 w-fit\"\n          >\n            <span>TEAM ROOM</span>\n            <ArrowRight className=\"w-5 h-5\" />\n          </Link>\n        </div>\n      );\n    }\n\n    // Render team message with markdown\n    const renderTools = () => {\n      const timelineEvents = message.events || [];\n\n      if (timelineEvents.length === 0) {\n        return null;\n      }\n\n      const normalized = normalizeEvents(\n        timelineEvents,\n        message.content ?? '',\n        getMemberDisplayName\n      );\n\n      if (normalized.length === 0) return null;\n\n      return (\n        <div className=\"mt-4 mb-4\">\n          <TeamEventTimeline\n            events={normalized}\n            isStreaming={false}\n          />\n        </div>\n      );\n    };\n\n    // Render member responses if available\n    const renderMemberResponses = () => {\n      if (!message.memberResponses || message.memberResponses.length === 0) return null;\n\n      return (\n        <div className='mt-4 mb-4 pb-3 border-b border-border'>\n          <Button\n            variant='ghost'\n            size='sm'\n            onClick={() =>\n              setExpandedResponses((prev) => ({\n                ...prev,\n                [message.id]: !prev[message.id],\n              }))\n            }\n            className='text-xs text-muted-foreground mb-2 flex items-center gap-1 hover:bg-muted hover:text-foreground p-0 h-auto font-normal'\n          >\n            <Users className='h-3 w-3' />\n            <span>Team Member Responses ({message.memberResponses.length})</span>\n            {expandedResponses[message.id] ? (\n              <ChevronUp className='h-3 w-3' />\n            ) : (\n              <ChevronDown className='h-3 w-3' />\n            )}\n          </Button>\n          {expandedResponses[message.id] && (\n            <div className=\"space-y-3\">\n              {message.memberResponses.map((member, index) => (\n                <div\n                  key={`${member.member_id}-${index}`}\n                  className=\"p-3 rounded-md bg-card border border-border\"\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-sm font-medium text-foreground\">\n                        {getMemberDisplayName(member.member_id, member.member_name)}\n                      </span>\n                      {member.model && (\n                        <span className=\"text-xs bg-muted text-muted-foreground px-1.5 py-0.5 rounded\">\n                          {member.model}\n                        </span>\n                      )}\n                    </div>\n                    {member.created_at && (\n                      <span className=\"text-xs text-muted-foreground\">\n                        {format(new Date(member.created_at * 1000), 'HH:mm:ss')}\n                      </span>\n                    )}\n                  </div>\n\n                  <div className=\"text-sm text-foreground\">\n                    <ReactMarkdown components={markdownComponents}>\n                      {cleanDuplicateContent(member.content)}\n                    </ReactMarkdown>\n                  </div>\n\n                  {member.tools && member.tools.length > 0 && (\n                    <div className=\"mt-2 pt-2 border-t border-border\">\n                      <div className=\"text-xs text-muted-foreground mb-1\">\n                        Tools Used ({member.tools.length})\n                      </div>\n                      <div className=\"space-y-1\">\n                        {member.tools.map((tool, idx) => (\n                          <div\n                            key={`member-tool-${idx}`}\n                            className=\"text-xs bg-muted text-muted-foreground p-1.5 rounded\"\n                          >\n                            <div className=\"font-medium flex items-center gap-2\">\n                              {tool.tool_call_error ? (\n                                <XCircle className=\"w-3 h-3 text-red-500\" />\n                              ) : (\n                                <CheckCircle className=\"w-3 h-3 text-green-500\" />\n                              )}\n                              {String(tool.name || tool.tool_name || 'Unknown Tool')}\n                              {typeof tool.metrics?.time === 'number' && (\n                                <span className=\"text-muted-foreground\">\n                                  ({Number(tool.metrics.time).toFixed(2)}s)\n                                </span>\n                              )}\n                            </div>\n                            {(tool.output || tool.result) && (\n                              <div className=\"opacity-80 mt-1 max-h-20 overflow-hidden text-foreground\">\n                                {String(tool.output || tool.result)}\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      );\n    };\n\n    if (message.fileIds && message.fileIds.length > 0) {\n      const contentToRenderWithFiles = message.sender === 'team'\n        ? (message.memberResponses && message.memberResponses.length > 0 && message.content.length < 1000\n          ? message.content\n          : cleanMessageContent(message.content, message.memberResponses))\n        : message.content;\n\n      return (\n        <div className=\"space-y-2\">\n          <div className=\"text-xs text-foreground-60\">\n            📎 {message.fileIds.length} file{message.fileIds.length > 1 ? 's' : ''} attached\n          </div>\n          {renderMemberResponses()}\n          {renderTools()}\n          <ReactMarkdown components={markdownComponents}>\n            {contentToRenderWithFiles}\n          </ReactMarkdown>\n        </div>\n      );\n    }\n\n    // Check if this appears to be an error message\n    const contentToRender = message.sender === 'team'\n      ? (message.memberResponses && message.memberResponses.length > 0 && message.content.length < 1000\n        ? message.content\n        : cleanMessageContent(message.content, message.memberResponses))\n      : message.content;\n\n    return (\n      <div>\n        {renderMemberResponses()}\n        {renderTools()}\n        <ReactMarkdown components={markdownComponents}>\n          {contentToRender}\n        </ReactMarkdown>\n      </div>\n    );\n  };\n\n  // Scroll to bottom of chat when new messages arrive\n  useEffect(() => {\n    if (!userHasScrolled) {\n      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages, currentStreamingContent]);\n\n  // Handle auto-scrolling behavior\n  useEffect(() => {\n    const chatContainer = chatContainerRef.current;\n    if (!chatContainer) return;\n\n    const handleScroll = () => {\n      const { scrollTop, scrollHeight, clientHeight } = chatContainer;\n      const isNearBottom = scrollHeight - scrollTop - clientHeight < 100;\n\n      if (isNearBottom) {\n        setUserHasScrolled(false);\n      } else {\n        setUserHasScrolled(true);\n        lastUserScrollPosition.current = scrollTop;\n      }\n    };\n\n    chatContainer.addEventListener('scroll', handleScroll);\n    return () => chatContainer.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  // Focus the input when component mounts\n  useEffect(() => {\n    textareaRef.current?.focus();\n  }, []);\n\n  // Clean up WebSocket on unmount\n  useEffect(() => {\n    return () => {\n      cleanupWebSocket();\n    };\n  }, []);\n\n  const formatMessageTimestamp = (timestamp: Date, messageIndex?: number): string => {\n    const now = new Date();\n    const timeDiff = now.getTime() - timestamp.getTime();\n    const isWithinLastHour = timeDiff < 3600000; // 1 hour\n\n    // Check if this message is close in time to adjacent messages\n    let showSeconds = isWithinLastHour; // Default to showing seconds for recent messages\n\n    if (messageIndex !== undefined && messages.length > 1) {\n      const checkRange = 3; // Check 3 messages before and after\n      for (let i = Math.max(0, messageIndex - checkRange); i <= Math.min(messages.length - 1, messageIndex + checkRange); i++) {\n        if (i !== messageIndex && messages[i]) {\n          const otherTimestamp = messages[i].timestamp;\n          const timeDifference = Math.abs(timestamp.getTime() - otherTimestamp.getTime());\n          // If within 5 minutes of another message, show seconds for precision\n          if (timeDifference < 300000) {\n            showSeconds = true;\n            break;\n          }\n        }\n      }\n    }\n\n    // Show seconds for recent messages or when messages are clustered\n    if (showSeconds) {\n      return format(timestamp, 'h:mm:ss a');\n    }\n\n    // Show standard format for older, isolated messages\n    return format(timestamp, 'h:mm a');\n  };\n\n  const handleCopy = (content: string) => {\n    navigator.clipboard.writeText(content).then(() => {\n      showToast('Copied to clipboard!');\n    });\n  };\n\n  const renderStreamingMemberResponses = () => {\n    if (!currentMemberResponses || currentMemberResponses.length === 0) return null;\n\n    return (\n      <div className='mt-4 mb-4 pb-3 border-b border-border'>\n        <Button\n          variant='ghost'\n          size='sm'\n          onClick={() => setStreamingMemberResponsesExpanded(!streamingMemberResponsesExpanded)}\n          className='text-xs text-muted-foreground mb-2 flex items-center gap-1 hover:bg-muted hover:text-foreground p-0 h-auto font-normal'\n        >\n          <Users className='h-3 w-3' />\n          <span>Team Member Responses ({currentMemberResponses.length})</span>\n          {streamingMemberResponsesExpanded ? (\n            <ChevronUp className='h-3 w-3' />\n          ) : (\n            <ChevronDown className='h-3 w-3' />\n          )}\n        </Button>\n        {streamingMemberResponsesExpanded && (\n          <div className=\"space-y-3\">\n            {currentMemberResponses.map((member, index) => (\n              <div\n                key={`${member.member_id}-${index}`}\n                className=\"p-3 rounded-md bg-card border border-border\"\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm font-medium text-foreground\">\n                      {getMemberDisplayName(member.member_id, member.member_name)}\n                    </span>\n                    {member.model && (\n                      <span className=\"text-xs bg-muted text-muted-foreground px-1.5 py-0.5 rounded\">\n                        {member.model}\n                      </span>\n                    )}\n                  </div>\n                  {member.created_at && (\n                    <span className=\"text-xs text-muted-foreground\">\n                      {format(new Date(member.created_at), 'HH:mm:ss')}\n                    </span>\n                  )}\n                </div>\n\n                <div className=\"text-sm text-foreground\">\n                  <ReactMarkdown components={markdownComponents}>\n                    {cleanDuplicateContent(member.content)}\n                  </ReactMarkdown>\n                </div>\n\n                {member.tools && member.tools.length > 0 && (\n                  <div className=\"mt-2 pt-2 border-t border-border\">\n                    <div className=\"text-xs text-muted-foreground mb-1\">\n                      Tools Used ({member.tools.length})\n                    </div>\n                    <div className=\"space-y-1\">\n                      {member.tools.map((tool, idx) => (\n                        <div\n                          key={`streaming-member-tool-${idx}`}\n                          className=\"text-xs bg-muted text-muted-foreground p-1.5 rounded\"\n                        >\n                          <div className=\"font-medium flex items-center gap-2\">\n                            {tool.tool_call_error ? (\n                              <XCircle className=\"w-3 h-3 text-red-500\" />\n                            ) : (\n                              <CheckCircle className=\"w-3 h-3 text-green-500\" />\n                            )}\n                            {String(tool.name || tool.tool_name || 'Unknown Tool')}\n                            {typeof tool.metrics?.time === 'number' && (\n                              <span className=\"text-muted-foreground\">\n                                ({Number(tool.metrics.time).toFixed(2)}s)\n                              </span>\n                            )}\n                          </div>\n                          {(tool.output || tool.result) && (\n                            <div className=\"opacity-80 mt-1 max-h-20 overflow-hidden text-foreground\">\n                              {String(tool.output || tool.result)}\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // Render the chat interface\n  return (\n    <div className=\"flex h-full w-full relative\">\n      {/* Main Chat Area */}\n      <div className={`${isHomeTeam ? 'p-2 sm:p-5' : ''} w-full h-full`}>\n        <div className={`flex flex-col h-full transition-all duration-300 w-full overflow-hidden ${isHomeTeam ? 'border border-border rounded-[34px] max-w-4xl mx-auto p-4 bg-muted-3' : ''}`}>\n          <style>{`\n        .chat-messages::-webkit-scrollbar {\n          width: 6px;\n        }\n        .chat-messages::-webkit-scrollbar-track {\n          background: transparent;\n        }\n        .chat-messages::-webkit-scrollbar-thumb {\n          background-color: rgba(155, 155, 155, 0.2);\n          border-radius: 20px;\n        }\n        .chat-messages::-webkit-scrollbar-thumb:hover {\n          background-color: rgba(155, 155, 155, 0.3);\n        }\n      `}</style>\n\n          {/* Chat messages area */}\n          <div\n            ref={chatContainerRef}\n            className=\"flex-1 overflow-y-auto p-2 sm:p-4 pt-2 sm:pt-4 pb-1 chat-messages\"\n            style={{ scrollBehavior: 'smooth' }}\n          >\n            <div className={`max-w-4xl w-full mx-auto min-h-full flex flex-col ${messages.length !== 0 ? 'items-start justify-start' : 'items-center justify-center'}`}>\n              {isLoadingSession && messages.length === 0 ? (\n                <div className=\"flex justify-center items-center w-full\">\n                  <Loader2 className=\"h-8 w-8 text-muted-foreground animate-spin\" />\n                </div>\n              ) : messages.length === 0 ? (\n                <div className=\"flex justify-center items-center w-full\">\n                  <div className=\"flex flex-col justify-center items-center text-center text-muted-foreground\">\n                    <h3 className=\"text-lg font-medium text-foreground-80 mb-2\">\n                      Start chatting with this team\n                    </h3>\n                    <p className=\"max-w-md text-sm\">\n                      Send a message to start a conversation with this team of AI agents working together.\n                    </p>\n                  </div>\n                </div>\n              ) : (\n                <div className='space-y-4 sm:space-y-6 w-full'>\n                  {messages.map((message, index) => (\n                    <div className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'} w-full px-2 sm:px-4`}>\n                      <div className={`flex ${message.sender === 'user' ? 'flex-row-reverse' : 'flex-row'} gap-2 sm:gap-3 max-w-[85%] ${message.sender === 'user' ? 'ml-auto' : ''}`}>\n                        {/* Message avatar */}\n                        {!isHomeTeam && (\n                          <div\n                            className={`flex-shrink-0 ${message.sender === 'user' ? 'ml-1 sm:ml-2' : 'mr-1 sm:mr-2'\n                              }`}\n                          >\n                            {message.sender === 'user' ? (\n                              user ? (\n                                <Avatar className='h-7 w-7 sm:h-8 sm:w-8 text-white'>\n                                  <AvatarFallback className='bg-gradient-to-br from-violet-500 to-violet-700'>\n                                    {user?.username?.[0]?.toUpperCase() || 'U'}\n                                  </AvatarFallback>\n                                </Avatar>\n                              ) : (\n                                <Avatar className='h-7 w-7 sm:h-8 sm:w-8 text-white'>\n                                  <AvatarFallback className='bg-gradient-to-br from-violet-500 to-violet-700'>\n                                    U\n                                  </AvatarFallback>\n                                </Avatar>\n                              )\n                            ) : (\n                              <Avatar className='h-7 w-7 sm:h-8 sm:w-8 text-white'>\n                                <AvatarFallback className={`bg-gradient-to-br ${accentColor}`}>\n                                  T\n                                </AvatarFallback>\n                              </Avatar>\n                            )}\n                          </div>\n                        )}\n\n                        {/* Message content */}\n                        <div\n                          className={`rounded-2xl px-4 sm:px-5 py-3 sm:py-4 flex-1 overflow-x-auto border ${message.sender === 'user' ? 'bubble-user ml-auto' : 'bubble-team'} group`}\n                        >\n                          <div className=\"flex justify-between items-center mb-1 text-xs text-muted-foreground-60\">\n                            <span>\n                              {message.sender === 'user' ? 'You' : 'Team'} - {formatMessageTimestamp(message.timestamp, index)}\n                            </span>\n                            <button\n                              onClick={() => handleCopy(message.content)}\n                              title=\"Copy\"\n                              className=\"ml-2 opacity-0 group-hover:opacity-100 transition-opacity text-muted-foreground hover:text-foreground\"\n                            >\n                              <Copy className=\"w-4 h-4\" />\n                            </button>\n                          </div>\n\n                          {renderMessageContent(message)}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n\n                  {/* Currently streaming message */}\n                  {(isLoading || hasStreamedResponse) && normalizeEvents(currentEvents, currentStreamingContent, getMemberDisplayName).length > 0 && (\n                    <div className={`flex justify-start w-full px-2 sm:px-4`}>\n                      <div className={`flex flex-row gap-2 sm:gap-3 max-w-[85%]`}>\n                        {!isHomeTeam && (\n                          <div className=\"flex-shrink-0 mr-1 sm:mr-2\">\n                            <Avatar className='h-7 w-7 sm:h-8 sm:w-8 text-white'>\n                              <AvatarFallback className={`bg-gradient-to-br ${accentColor}`}>T</AvatarFallback>\n                            </Avatar>\n                          </div>\n                        )}\n                        <div className={`rounded-2xl px-3 sm:px-4 py-2 sm:py-3 ${isLoading && !hasStreamedResponse ? 'bubble-user ml-auto' : 'bubble-team'\n                          } text-foreground flex-1 max-w-[700px] overflow-x-auto`}>\n                          <div className='text-xs text-muted-foreground-60 mb-1'>\n                            Team - {formatMessageTimestamp(new Date(), messages.length)}\n                          </div>\n                          {renderStreamingMemberResponses()}\n                          <TeamEventTimeline\n                            events={normalizeEvents(currentEvents, currentStreamingContent, getMemberDisplayName)}\n                            isStreaming\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Loading indicator when not streaming yet */}\n                  {isLoading && !currentStreamingContent && (\n                    <div className='flex justify-start w-full px-2 sm:px-4 animate-in fade-in-0 slide-in-from-bottom-2 duration-300'>\n                      {!isHomeTeam && (\n                        <div\n                          className={`w-7 h-7 sm:w-8 sm:h-8 md:w-10 md:h-10 rounded-full bg-gradient-to-br ${accentColor} flex items-center justify-center mr-2 sm:mr-2.5 flex-shrink-0 shadow-md`}\n                          style={{ animation: 'pulse 2s infinite ease-in-out' }}\n                        >\n                          <Users className='h-3 w-3 sm:h-4 sm:w-4 md:h-5 md:w-5 text-white' />\n                        </div>\n                      )}\n                      <div className='rounded-2xl bg-card backdrop-blur-sm text-foreground px-4 py-3 shadow-md border border-zinc-600/30 relative overflow-hidden'>\n                        <div\n                          className='absolute inset-0 bg-gradient-to-r from-transparent via-zinc-600/10 to-transparent'\n                          style={{\n                            backgroundSize: '200% 100%',\n                            animation: 'shimmer 3s infinite linear',\n                            animationFillMode: 'forwards',\n                          }}\n                        ></div>\n                        <div className='relative flex flex-col space-y-1.5'>\n                          <div className='flex space-x-2 items-center h-5'>\n                            <div\n                              className={`w-2 h-2 rounded-full bg-gradient-to-r ${accentColor} opacity-80`}\n                              style={{ animation: 'scale 1.4s infinite ease-in-out' }}\n                            ></div>\n                            <div\n                              className={`w-2 h-2 rounded-full bg-gradient-to-r ${accentColor} opacity-80`}\n                              style={{ animation: 'scale 1.4s infinite ease-in-out 0.2s' }}\n                            ></div>\n                            <div\n                              className={`w-2 h-2 rounded-full bg-gradient-to-r ${accentColor} opacity-80`}\n                              style={{ animation: 'scale 1.4s infinite ease-in-out 0.4s' }}\n                            ></div>\n                            <span className='text-foreground-90 text-xs font-medium ml-1'>Thinking...</span>\n                          </div>\n                          <span className='text-muted-foreground text-xs'>Team is processing your request</span>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  <div ref={messagesEndRef} />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Chat input area */}\n          <div className=\"border-border\">\n            <div className=\"max-w-full sm:max-w-3xl mx-auto w-full px-2 sm:px-4\">\n              {/* Uploaded files preview */}\n              {(selectedFiles.length > 0 || uploadedFileIds.length > 0) && (\n                <div className=\"max-w-4xl mx-auto w-full px-2 sm:px-4 mb-2 mt-2\">\n                  <div className=\"flex flex-wrap gap-1\">\n                    {[\n                      ...selectedFiles.filter(\n                        (file) => !uploadedFileIds.some(f => f.name === file.name && f.size === file.size)\n                      ),\n                      ...uploadedFileIds\n                    ].map((file) => {\n                      const fileKey = `${file.name}-${file.size}`;\n                      const isUploaded = uploadedFileIds.some(f => f.name === file.name && f.size === file.size);\n                      return (\n                        <div\n                          key={fileKey}\n                          className=\"flex items-center bg-card px-2 py-1 rounded text-sm text-foreground max-w-full\"\n                        >\n                          <Paperclip className=\"w-4 h-4 text-foreground-60 mr-1 shrink-0\" />\n                          <div className=\"flex flex-col max-w-[200px]\">\n                            <span className=\"truncate\">{file.name}</span>\n                            {uploadProgress[fileKey] !== undefined && !isUploaded && (\n                              <div className=\"w-full bg-muted-10 h-1 mt-1 rounded overflow-hidden\">\n                                <div\n                                  className=\"bg-violet-500 h-full transition-all duration-300\"\n                                  style={{ width: `${uploadProgress[fileKey]}%` }}\n                                />\n                              </div>\n                            )}\n                          </div>\n                          {isUploaded && (\n                            <button\n                              type=\"button\"\n                              disabled={\n                                isLoading || Object.values(uploadProgress).some((percent) => percent < 100)\n                              }\n                              onClick={() =>\n                                setUploadedFileIds((prev) =>\n                                  prev.filter((f) => f.name !== file.name || f.size !== file.size)\n                                )\n                              }\n                              className={`ml-2 text-xs ${isLoading || Object.values(uploadProgress).some((p) => p < 100)\n                                ? 'text-zinc-400 cursor-not-allowed'\n                                : 'text-red-400 hover:text-red-600'\n                                }`}\n                            >\n                              ✕\n                            </button>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n\n              <form\n                onSubmit={handleUserMessageSubmit}\n                className={`w-full border border-border rounded-2xl p-3 sm:p-4 flex flex-col gap-3 bg-chat-input ${isHomeTeam ? '' : 'mb-6'} max-w-full sm:max-w-3xl mx-auto`}\n              >\n                {/* Textarea (top row) */}\n                <TextareaAutosize\n                  ref={textareaRef}\n                  className=\"w-full bg-transparent rounded-md p-2 sm:p-3 text-sm sm:text-base text-foreground \n                          placeholder:text-muted-foreground resize-none overflow-auto focus:outline-none focus:ring-0 focus:border-none\"\n                  placeholder=\"Send a message...\"\n                  minRows={1}\n                  maxRows={25}\n                  value={input}\n                  onChange={(e) => setInput(e.target.value)}\n                  onKeyDown={handleKeyDown}\n                />\n\n                {/* Bottom row: Upload and Submit */}\n                <div className=\"flex justify-between items-end\">\n                  {/* Upload button (left) */}\n                  <div>\n                    <label\n                      htmlFor=\"file-upload\"\n                      className={`rounded-full form-button p-2 sm:p-3 h-11 w-11 flex items-center justify-center \n                    transition-colors duration-200 \n                    ${isLoading ? 'opacity-50 cursor-not-allowed pointer-events-none' : 'cursor-pointer'}`}\n                      aria-label=\"Attach files\"\n                    >\n                      <span className=\"text-xl font-bold text-white\">＋</span>\n                    </label>\n                    <input\n                      type=\"file\"\n                      multiple\n                      id=\"file-upload\"\n                      title=\"\"\n                      className=\"hidden\"\n                      disabled={isLoading}\n                      onChange={async (e) => {\n                        if (e.target.files && e.target.files.length > 0) {\n                          const MAX_SIZE = 10 * 1024 * 1024; // 10MB\n                          const newFiles = Array.from(e.target.files);\n\n                          // Separate oversized files\n                          const tooLargeFiles = newFiles.filter((file) => file.size > MAX_SIZE);\n                          const allowedFiles = newFiles.filter((file) => file.size <= MAX_SIZE);\n\n                          // Notify user about each rejected file\n                          if (tooLargeFiles.length > 0) {\n                            const message = tooLargeFiles\n                              .map((file) => `• ${file.name} is too large (max 10MB)`)\n                              .join('\\n');\n\n                            showToast(message);\n                          }\n\n                          // Skip if no valid files left\n                          if (allowedFiles.length === 0) {\n                            e.target.value = '';\n                            return;\n                          }\n\n                          const existingKeys = new Set(\n                            uploadedFileIds.map((f) => `${f.name}-${f.size}`)\n                          );\n\n                          const filteredFiles = allowedFiles.filter(\n                            (file) => !existingKeys.has(`${file.name}-${file.size}`)\n                          );\n\n                          if (filteredFiles.length === 0) {\n                            e.target.value = '';\n                            return;\n                          }\n\n                          setSelectedFiles(filteredFiles);\n\n                          const result = await teamService.uploadFilesWithProgress(\n                            teamId,\n                            filteredFiles,\n                            sessionId,\n                            (fileKey, percent) => {\n                              if (percent === -1) {\n                                setSelectedFiles((prev) =>\n                                  prev.filter((f) => `${f.name}-${f.size}` !== fileKey)\n                                );\n                              } else {\n                                setUploadProgress((prev) => ({\n                                  ...prev,\n                                  [fileKey]: percent,\n                                }));\n                              }\n                            },\n                            showToast\n                          );\n\n                          if (result?.data?.session_id && !sessionId) {\n                            const newSessionId = result.data.session_id;\n                            setSessionId(newSessionId);\n                            sessionIdRef.current = newSessionId;\n                          }\n\n                          const uploaded = result?.data?.successful_files || [];\n                          const mapped = uploaded.map((file: any) => ({\n                            id: file.file_id,\n                            name: file.original_filename,\n                            size: file.size,\n                          }));\n\n                          setUploadedFileIds((prev) => [...prev, ...mapped]);\n                          setSelectedFiles((prev) =>\n                            prev.filter(\n                              (f) =>\n                                !mapped.some((m) => m.name === f.name && m.size === f.size)\n                            )\n                          );\n                          setUploadProgress({});\n                          e.target.value = '';\n                        }\n                      }}\n                    />\n                  </div>\n\n                  {/* Submit Button (right) */}\n                  <div>\n                    <Button\n                      type=\"submit\"\n                      disabled={isLoading || !input.trim()}\n                      className={`rounded-full form-button p-2 sm:p-3 h-11 w-11 flex items-center justify-center \n                    ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}\n                      aria-label=\"Send message\"\n                    >\n                      {isLoading ? (\n                        <Loader2 className=\"h-4 w-4 sm:h-5 sm:w-5 animate-spin text-white\" />\n                      ) : (\n                        <Send className=\"h-4 w-4 sm:h-5 sm:w-5 text-white\" />\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* No credits dialog */}\n      <AlertDialog open={showNoCreditDialog} onOpenChange={setShowNoCreditDialog}>\n        <AlertDialogContent className='bg-background border border-border'>\n          <AlertDialogHeader>\n            <AlertDialogTitle className='text-lg font-semibold text-foreground flex items-center gap-2'>\n              <AlertCircle className='h-5 w-5 text-red-500' />\n              Insufficient Credits\n            </AlertDialogTitle>\n          </AlertDialogHeader>\n          <AlertDialogDescription className='text-foreground-80'>\n            You need credits to use the team chat feature. Purchase credits to continue.\n          </AlertDialogDescription>\n          <AlertDialogFooter className='mt-4'>\n            <AlertDialogCancel className='bg-card hover:bg-card-hover text-foreground-80 border-border'>\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction asChild>\n              <Button className='bg-violet-600 hover:bg-violet-700 text-foreground' asChild>\n                <Link to='/payment'>Purchase Credits</Link>\n              </Button>\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <GlobalStyle />\n    </div>\n  );\n};","import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from \"../utils/utils\";\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-lg text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-yellow-400 focus-visible:ring-offset-2 focus-visible:ring-offset-zinc-900 disabled:pointer-events-none disabled:opacity-50 cursor-pointer',\n  {\n    variants: {\n      variant: {\n        default: 'bg-yellow-500 text-zinc-900 hover:bg-yellow-400',\n        destructive: 'bg-red-500 text-foreground hover:bg-red-600',\n        outline: 'border border-zinc-700 bg-transparent hover:bg-zinc-800 text-zinc-200',\n        secondary: 'bg-zinc-800 text-zinc-200 hover:bg-zinc-700',\n        ghost: 'hover:bg-zinc-800 text-zinc-300 hover:text-zinc-100',\n        link: 'text-yellow-500 underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8 text-base',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button';\n    return (\n      <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };\n","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatDate(date: Date) {\n  return new Intl.DateTimeFormat('en-US', {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric',\n  }).format(date);\n}\n\nexport function truncateText(text: string, maxLength: number = 100) {\n  if (text.length <= maxLength) return text;\n  return text.slice(0, maxLength) + '...';\n}\n\nexport const getAccentColor = (seed?: string | null) => {\n  // Handle undefined, null, or empty string\n  if (!seed || seed === 'undefined') {\n    return 'from-violet-400 to-green-400'; // Default gradient\n  }\n\n  // Special cases for important UI elements\n  if (seed === 'login' || seed === 'brand' || seed === 'default') {\n    return 'from-violet-400 to-green-400';\n  }\n\n  const colors = [\n    'from-violet-400 to-green-400', // Our new primary gradient\n    'from-blue-500 to-purple-600',\n    'from-green-500 to-emerald-700',\n    'from-pink-500 to-rose-600',\n    'from-indigo-500 to-indigo-800',\n    'from-amber-500 to-orange-600',\n    'from-cyan-500 to-teal-600',\n    'from-red-500 to-pink-600',\n    'from-yellow-500 to-amber-600',\n    'from-emerald-500 to-green-600',\n    'from-purple-500 to-violet-600',\n    'from-sky-500 to-blue-600',\n    'from-orange-500 to-red-600',\n    'from-teal-500 to-cyan-600',\n    'from-lime-500 to-green-600',\n    'from-fuchsia-500 to-purple-600',\n    'from-rose-500 to-pink-600',\n    'from-slate-500 to-gray-600',\n    'from-zinc-500 to-stone-600',\n    'from-neutral-500 to-gray-600',\n  ];\n\n  try {\n    let hash = 0;\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    return colors[Math.abs(hash) % colors.length];\n  } catch {\n    // If any error occurs, return the default gradient\n    return 'from-violet-400 to-green-400';\n  }\n};\n","import * as React from 'react';\nimport { cn } from \"../utils/utils\";\n\nconst Avatar = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn('relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full', className)}\n      {...props}\n    />\n  )\n);\nAvatar.displayName = 'Avatar';\n\nconst AvatarImage = React.forwardRef<HTMLImageElement, React.ImgHTMLAttributes<HTMLImageElement>>(\n  ({ className, ...props }, ref) => (\n    <img ref={ref} className={cn('aspect-square h-full w-full', className)} {...props} />\n  )\n);\nAvatarImage.displayName = 'AvatarImage';\n\nconst AvatarFallback = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn('flex h-full w-full items-center justify-center rounded-full', className)}\n      {...props}\n    />\n  )\n);\nAvatarFallback.displayName = 'AvatarFallback';\n\nexport { Avatar, AvatarImage, AvatarFallback };\n","'use client';\n\nimport * as React from 'react';\nimport * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';\n\nimport { cn } from \"../utils/utils\";\nimport { buttonVariants } from \"./button\";\n\nconst AlertDialog = AlertDialogPrimitive.Root;\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger;\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal;\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      'fixed inset-0 z-50 bg-black/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 bg-zinc-800/90 backdrop-blur-md border border-border p-6 shadow-xl duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-xl md:w-full',\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n));\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\n\nconst AlertDialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('flex flex-col space-y-2 text-center sm:text-left', className)} {...props} />\n);\nAlertDialogHeader.displayName = 'AlertDialogHeader';\n\nconst AlertDialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 mt-6', className)}\n    {...props}\n  />\n);\nAlertDialogFooter.displayName = 'AlertDialogFooter';\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn('text-xl font-bold text-foreground', className)}\n    {...props}\n  />\n));\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-gray-300 mt-2', className)}\n    {...props}\n  />\n));\nAlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName;\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(\n      buttonVariants(),\n      'bg-yellow-500 hover:bg-yellow-600 text-foreground font-medium px-4 rounded-lg hover:shadow-md transition-all',\n      className\n    )}\n    {...props}\n  />\n));\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: 'outline' }),\n      'mt-2 sm:mt-0 border-zinc-600 text-foreground hover:bg-zinc-700 hover:text-foreground rounded-lg',\n      className\n    )}\n    {...props}\n  />\n));\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n};\n","import { TeamEvent, ToolCall } from '../types/types';\n\nexport type NormalizedEvent =\n    | { type: 'RunStarted' }\n    | {\n        type: 'ToolRun';\n        tool_name: string;\n        tool_args: Record<string, any>;\n        result?: string;\n        error?: boolean;\n        started_at: number;\n        completed_at: number;\n        formatted_calls?: string[];\n    }\n    | {\n        type: 'MemberResponse';\n        member_name: string;\n        content: string;\n        tools?: ToolCall[];\n        model?: string;\n        created_at?: number;\n    }\n    | {\n        type: 'FinalResponse';\n        content: string;\n    };\n\nexport const normalizeEvents = (\n    events: TeamEvent[],\n    currentStreamingContent: string,\n    getMemberDisplayName: (id: string, name?: string) => string\n): NormalizedEvent[] => {\n    const normalized: NormalizedEvent[] = [];\n\n    const toolRuns: Record<\n        string,\n        Partial<NormalizedEvent & { type: 'ToolRun' }>\n    > = {};\n\n    const pendingToolOutputs: Record<string, true> = {};\n\n    for (const event of events) {\n        if (event.type === 'RunStarted') {\n            normalized.push({ type: 'RunStarted' });\n        }\n\n        if (event.type === 'ToolCallStarted') {\n            const tools = event.data?.tools || [];\n            tools.forEach((tool: any) => {\n                const existing = toolRuns[tool.tool_call_id] || {};\n                toolRuns[tool.tool_call_id] = {\n                    ...existing,\n                    type: 'ToolRun',\n                    tool_name: tool.tool_name || tool.name || 'Unknown Tool',\n                    tool_args: tool.tool_args || tool.arguments || {},\n                    started_at: tool.created_at || event.timestamp || Date.now()\n                };\n            });\n        }\n\n        if (event.type === 'ToolCallCompleted') {\n            const tools = event.data?.tools || [event.data];\n            tools.forEach((tool: any) => {\n                const existing = toolRuns[tool.tool_call_id] || {};\n                const memberId = tool.tool_args?.member_id || tool.arguments?.member_id;\n\n                const matchedFormattedCalls =\n                    event.data?.formatted_tool_calls?.filter((call: string) =>\n                        memberId && call.includes(memberId)\n                    ) || [];\n\n                toolRuns[tool.tool_call_id] = {\n                    ...existing,\n                    type: 'ToolRun',\n                    tool_name: tool.tool_name || tool.name || 'Unknown Tool',\n                    tool_args: tool.tool_args || tool.arguments || {},\n                    result: tool.result || tool.output || '',\n                    error: tool.tool_call_error,\n                    started_at: existing?.started_at || tool.created_at || event.timestamp,\n                    completed_at: Date.now(),\n                    formatted_calls: Array.from(new Set([\n                        ...(existing.formatted_calls || []),\n                        ...matchedFormattedCalls\n                    ]))\n                };\n\n                delete pendingToolOutputs[tool.tool_call_id];\n            });\n        }\n\n        if (event.type === 'RunResponse' || event.type === 'MemberResponse') {\n            const members = event.data?.member_responses || [event.data];\n            members.forEach((m: any) => {\n                m.tools?.forEach((tool: any) => {\n                    if (tool.status === 'completed' && tool.output === 'None') {\n                      pendingToolOutputs[tool.tool_call_id] = true;\n                    }\n                  });\n\n                normalized.push({\n                    type: 'MemberResponse',\n                    member_name: getMemberDisplayName(m.member_id, m.member_name),\n                    content: m.content,\n                    tools: m.tools,\n                    model: m.model,\n                    created_at: m.created_at,\n                });\n            });\n        }\n    }\n\n    Object.values(toolRuns).forEach((tool) => {\n        if (\n            tool.type === 'ToolRun' &&\n            tool.tool_name &&\n            tool.tool_args &&\n            typeof tool.started_at === 'number'\n        ) {\n            normalized.push({\n                type: 'ToolRun',\n                tool_name: tool.tool_name,\n                tool_args: tool.tool_args,\n                result: tool.result,\n                error: tool.error,\n                started_at: tool.started_at,\n                completed_at: tool.completed_at ?? -1,\n                formatted_calls: tool.formatted_calls || [],\n            });\n        }\n    });\n\n    if (currentStreamingContent?.trim()) {\n        normalized.push({ type: 'FinalResponse', content: currentStreamingContent.trim() });\n    }\n\n    return normalized;\n};","import React, { useState } from 'react';\nimport { CheckCircle, ChevronDown, XCircle, Loader2, Users } from 'lucide-react';\nimport { format } from 'date-fns';\nimport ReactMarkdown from 'react-markdown';\n\ninterface ToolRunEvent {\n    type: 'ToolRun';\n    tool_name: string;\n    tool_args: Record<string, unknown>;\n    result?: string;\n    error?: boolean;\n    started_at: number;\n    completed_at: number;\n    formatted_calls?: string[];\n}\n\ninterface MemberResponseEvent {\n    type: 'MemberResponse';\n    member_name: string;\n    content: string;\n    tools?: { tool_name?: string; name?: string }[];\n    model?: string;\n    created_at?: number;\n}\n\ninterface RunStartedEvent {\n    type: 'RunStarted';\n}\n\ninterface FinalResponseEvent {\n    type: 'FinalResponse';\n    content: string;\n}\n\nexport type SequencedEvent = ToolRunEvent | MemberResponseEvent | RunStartedEvent | FinalResponseEvent;\n\ninterface SequencedResponseBoxProps {\n    event: SequencedEvent;\n    index: number;\n    isStreaming: boolean;\n}\n\nexport const SequencedResponseBox: React.FC<SequencedResponseBoxProps> = ({ event, isStreaming }) => {\n    const [expanded, setExpanded] = useState(isStreaming);\n    const hasCollapsedAutomatically = React.useRef(false);\n\n    React.useEffect(() => {\n        if (event.type === 'ToolRun') {\n            const tool = event as ToolRunEvent;\n            const isCompleted = tool.completed_at !== -1 && tool.result !== 'None' && !tool.error;\n\n            // Collapse only once when completed during streaming\n            if (isStreaming && isCompleted && !hasCollapsedAutomatically.current) {\n                setExpanded(false);\n                hasCollapsedAutomatically.current = true;\n            }\n\n            // Final collapse if streaming ends and it hasn't collapsed yet\n            if (!isStreaming && expanded && !isCompleted) {\n                setExpanded(false);\n                hasCollapsedAutomatically.current = true;\n            }\n        } else if (!isStreaming && expanded) {\n            setExpanded(false);\n        }\n    }, [isStreaming, event]);\n\n    const toggleExpanded = () => setExpanded(prev => !prev);\n\n    const renderValue = (val: any) =>\n        typeof val === 'string' && val.startsWith('http')\n            ? <a href={val} className=\"text-blue-400 underline\" target=\"_blank\">{val}</a>\n            : <span>{String(val).replace(/_/g, ' ')}</span>;\n\n    const renderToolRun = (toolEvent: ToolRunEvent) => {\n        const { tool_name, tool_args, result, error, completed_at } = toolEvent;\n\n        const formattedMemberId =\n            typeof tool_args.member_id === 'string'\n                ? tool_args.member_id\n                    .replace(/[-_]/g, ' ')\n                    .replace(/\\b\\w/g, (c: string) => c.toUpperCase())\n                : 'member';\n\n        const formattedToolName = tool_name\n            .replace('atransfer', 'transfer')\n            .replace(/_/g, ' ')\n            .replace(/\\bmember\\b/, formattedMemberId);\n\n        return (\n            <div className=\"bg-card rounded mb-2 border border-border relative\">\n                {/* Sticky header */}\n                <div className=\"sticky top-0 bg-card z-10 border-b border-border px-4 py-3 flex justify-between items-center\">\n                    <div className=\"flex items-center gap-2 font-semibold text-sm text-foreground\">\n                        {error ? (\n                            <XCircle className=\"w-4 h-4 text-red-500\" />\n                        ) : completed_at && completed_at !== -1 && result !== 'None' ? (\n                            <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                        ) : (\n                            <Loader2 className=\"w-4 h-4 text-blue-400 animate-spin\" />\n                        )}\n                        {formattedToolName}\n                    </div>\n                    <button onClick={toggleExpanded} className=\"text-xs text-blue-400 flex items-center gap-1\">\n                        {expanded ? 'Hide' : 'Show'} <ChevronDown className={`w-3 h-3 ${expanded ? 'rotate-180' : ''}`} />\n                    </button>\n                </div>\n\n                {/* Scrollable content */}\n                {expanded && (\n                    <div className=\"max-h-[360px] overflow-y-auto px-4 pt-4 pb-4 text-xs space-y-1\">\n                        {/* Content starts here */}\n                        <div className=\"font-medium\">\n                            Time:\n                            {/* {started_at ? ` ${format(new Date(started_at), 'HH:mm:ss')}` : ' Unknown'} - */}\n                            {completed_at && completed_at !== -1\n                                ? ` ${format(new Date(completed_at), 'HH:mm:ss')}`\n                                : ' In progress'}\n                        </div>\n                        <div className=\"text-xs mt-2\">\n                            <div className=\"font-medium mb-1\">Parameters:</div>\n                            <ul className=\"space-y-1 ml-4 list-disc\">\n                                {Object.entries(tool_args).map(([key, value]) => (\n                                    <li key={key}>\n                                        <span className=\"font-semibold\">{key.replace(/_/g, ' ')}:</span>{' '}\n                                        {typeof value === 'string'\n                                            ? value.replace(/[-_]/g, ' ').replace(/\\b\\w/g, c => c.toUpperCase())\n                                            : renderValue(value)}\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                        {completed_at && completed_at !== -1 && tool_name.includes('transfer') && !error && result !== 'None' && toolEvent.formatted_calls?.length ? (\n                            <div className=\"text-xs bg-muted p-2 rounded mt-2 border border-border font-mono break-words whitespace-pre-wrap space-y-1\">\n                                {toolEvent.formatted_calls.map((call, i) => (\n                                    <div key={i}>\n                                        {call.replace('atransfer_task_to_member', 'transfer_task_to_member')}\n                                    </div>\n                                ))}\n                            </div>\n                        ) : (\n                            <div className=\"flex items-center gap-1\">\n                                {error ? (\n                                    <XCircle className=\"w-4 h-4 text-red-500\" />\n                                ) : completed_at && completed_at !== -1 && result !== 'None' ? (\n                                    <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                                ) : (\n                                    <Loader2 className=\"w-4 h-4 text-blue-400 animate-spin\" />\n                                )}\n                                <span className=\"text-muted-foreground\">\n                                    {error ? 'Error' : completed_at && completed_at !== -1 && result !== 'None' ? 'Completed' : 'Running'}\n                                </span>\n                            </div>\n                        )}\n                        {result && result !== 'None' ? (\n                            <div className=\"mt-2 text-sm space-y-3\">\n                                {(() => {\n                                    try {\n                                        // Try to split out valid JSON from the start\n                                        const trimmed = result.trim();\n\n                                        // Heuristic: find where the JSON part ends\n                                        const jsonEndIndex = (() => {\n                                            let stack = [];\n                                            for (let i = 0; i < trimmed.length; i++) {\n                                                const char = trimmed[i];\n                                                if (char === '{' || char === '[') stack.push(char);\n                                                if (char === '}' || char === ']') stack.pop();\n                                                if (stack.length === 0 && (char === '}' || char === ']')) {\n                                                    return i + 1;\n                                                }\n                                            }\n                                            return -1;\n                                        })();\n\n                                        const jsonPart = trimmed.slice(0, jsonEndIndex).trim();\n                                        const markdownPart = trimmed.slice(jsonEndIndex).trim();\n\n                                        const parsedJson = JSON.parse(jsonPart);\n\n                                        return (\n                                            <>\n                                                {/* JSON part */}\n                                                <pre className=\"bg-muted p-3 rounded text-xs whitespace-pre-wrap break-words border border-border overflow-x-auto\">\n                                                    <code>{JSON.stringify(parsedJson, null, 2)}</code>\n                                                </pre>\n\n                                                {/* Markdown part */}\n                                                {markdownPart && (\n                                                    <div className=\"bg-muted p-4 rounded border border-border\">\n                                                        <ReactMarkdown\n                                                            children={markdownPart}\n                                                            components={{\n                                                                p: ({ children }) => (\n                                                                    <p className=\"prose prose-invert max-w-none whitespace-pre-wrap break-words\">\n                                                                        {children}\n                                                                    </p>\n                                                                ),\n                                                                code: ({ children }) => (\n                                                                    <code className=\"bg-card text-purple-300 px-1 rounded\">{children}</code>\n                                                                ),\n                                                                li: ({ children }) => (\n                                                                    <li className=\"ml-4 list-disc\">{children}</li>\n                                                                ),\n                                                                h2: ({ children }) => (\n                                                                    <h2 className=\"text-foreground text-xl mt-4 mb-2\">{children}</h2>\n                                                                ),\n                                                                h3: ({ children }) => (\n                                                                    <h3 className=\"text-foreground text-lg mt-3 mb-1\">{children}</h3>\n                                                                ),\n                                                            }}\n                                                        />\n                                                    </div>\n                                                )}\n                                            </>\n                                        );\n                                    } catch (err) {\n                                        // Enhanced fallback: detect step-based or just render whole thing as markdown\n                                        if (/Step \\d+:/.test(result)) {\n                                            return Array.from(\n                                                new Set(\n                                                    result\n                                                        .split(/(?=Step \\d+:)/g)\n                                                        .map((s) => s.trim().replace(/,+$/, ''))\n                                                )\n                                            )\n                                                .filter((s) => s)\n                                                .map((step, i) => (\n                                                    <div\n                                                        key={i}\n                                                        className=\"bg-muted p-3 rounded border border-border space-y-1\"\n                                                    >\n                                                        {step.split('\\n').map((line, j) => {\n                                                            const match = line.match(/^(Title|Reasoning|Action|Confidence):\\s*(.*)$/);\n                                                            if (match) {\n                                                                return (\n                                                                    <div key={j}>\n                                                                        <span className=\"font-semibold\">{match[1]}:</span>{' '}\n                                                                        <ReactMarkdown\n                                                                            children={match[2]}\n                                                                            components={{\n                                                                                p: ({ children }) => (\n                                                                                    <span className=\"prose prose-invert max-w-none\">\n                                                                                        {children}\n                                                                                    </span>\n                                                                                ),\n                                                                            }}\n                                                                        />\n                                                                    </div>\n                                                                );\n                                                            } else {\n                                                                return (\n                                                                    <ReactMarkdown\n                                                                        key={j}\n                                                                        children={line}\n                                                                        components={{\n                                                                            p: ({ children }) => (\n                                                                                <p className=\"prose prose-invert max-w-none whitespace-pre-wrap break-words\">\n                                                                                    {children}\n                                                                                </p>\n                                                                            ),\n                                                                        }}\n                                                                    />\n                                                                );\n                                                            }\n                                                        })}\n                                                    </div>\n                                                ));\n                                        } else {\n                                            // Pure markdown (like validation logs, error dumps, etc)\n                                            return (\n                                                <div className=\"bg-muted p-4 rounded border border-border\">\n                                                    <ReactMarkdown\n                                                        children={result}\n                                                        components={{\n                                                            pre: ({ children }) => (\n                                                                <pre className=\"bg-card p-3 rounded overflow-x-auto text-xs whitespace-pre-wrap break-words border border-zinc-600\">\n                                                                    {children}\n                                                                </pre>\n                                                            ),\n                                                            code: ({ children }) => (\n                                                                <code className=\"bg-card text-purple-300 px-1 rounded\">{children}</code>\n                                                            ),\n                                                            p: ({ children }) => (\n                                                                <p className=\"prose prose-invert max-w-none whitespace-pre-wrap break-words\">\n                                                                    {children}\n                                                                </p>\n                                                            ),\n                                                            li: ({ children }) => <li className=\"ml-4 list-disc\">{children}</li>,\n                                                            h2: ({ children }) => <h2 className=\"text-foreground text-xl mt-4 mb-2\">{children}</h2>,\n                                                            h3: ({ children }) => <h3 className=\"text-foreground text-lg mt-3 mb-1\">{children}</h3>,\n                                                        }}\n                                                    />\n                                                </div>\n                                            );\n                                        }\n                                    }\n                                })()}\n                            </div>\n                        ) : (\n                            <div className=\"bg-muted p-2 rounded text-sm text-muted-foreground\">\n                                Pending ...\n                            </div>\n                        )}\n                    </div>\n                )}\n            </div>\n        );\n    };\n\n    const renderMemberResponse = (memberEvent: MemberResponseEvent) => {\n        const { member_name, content, tools, model, created_at } = memberEvent;\n\n        return (\n            <div className=\"bg-card p-3 rounded mb-2 border border-border\">\n                <div className=\"flex justify-between items-center\">\n                    <div className=\"flex items-center gap-2\">\n                        <Users className=\"w-4 h-4 text-muted-foreground\" />\n                        <span className=\"font-semibold text-sm text-foreground\">{member_name}</span>\n                        {model && (\n                            <span className=\"text-xs bg-muted text-muted-foreground px-2 py-0.5 rounded\">\n                                {model}\n                            </span>\n                        )}\n                    </div>\n                    <button\n                        onClick={toggleExpanded}\n                        className=\"text-xs text-blue-600 dark:text-blue-400 flex items-center gap-1 hover:underline\"\n                    >\n                        {expanded ? 'Hide' : 'Show'}{' '}\n                        <ChevronDown className={`w-3 h-3 transition-transform ${expanded ? 'rotate-180' : ''}`} />\n                    </button>\n                </div>\n\n                {expanded && (\n                    <div className=\"mt-2 text-sm text-foreground\">\n                        <ReactMarkdown\n                            children={content}\n                            components={{\n                                p: ({ children }) => (\n                                    <p className=\"prose max-w-none prose-invert dark:prose-invert\">{children}</p>\n                                ),\n                            }}\n                        />\n\n                        {tools && tools.length > 0 && (\n                            <div className=\"mt-2 text-xs text-muted-foreground\">\n                                <span className=\"font-medium\">Tools used:</span>{' '}\n                                {tools.map((t) => t.tool_name || t.name || 'Unknown Tool').join(', ')}\n                            </div>\n                        )}\n\n                        {created_at && (\n                            <div className=\"text-xs text-muted-foreground mt-1\">\n                                🕓 {format(new Date(created_at), 'HH:mm:ss')}\n                            </div>\n                        )}\n                    </div>\n                )}\n            </div>\n        );\n    };\n\n    const renderRunStarted = () => (\n        <div className=\"text-xs text-muted-foreground mb-2\">🔄 Run started...</div>\n    );\n\n    if (event.type === 'ToolRun') return renderToolRun(event);\n    if (event.type === 'MemberResponse') return renderMemberResponse(event);\n    if (event.type === 'RunStarted') return renderRunStarted();\n\n    return null;\n};","import type { Components } from 'react-markdown';\n\nexport const markdownComponents: Components = {\n  code(props) {\n    const { className, children, ...rest } = props;\n    return (\n      <code className={`${className || ''} bg-card px-1 py-0.5 rounded text-sm break-words`} {...rest}>\n        {children}\n      </code>\n    );\n  },\n  pre(props) {\n    const { children, ...rest } = props;\n    return (\n      <pre className='bg-zinc-800 text-white p-4 rounded-md overflow-x-auto max-w-full my-4' {...rest}>\n        {children}\n      </pre>\n    );\n  },\n  ul(props) {\n    return <ul className='list-disc pl-5 my-4' {...props} />;\n  },\n  ol(props) {\n    return <ol className='list-decimal pl-5 my-4' {...props} />;\n  },\n  li(props) {\n    return <li className='my-1' {...props} />;\n  },\n  p(props) {\n    return <p className='my-2' {...props} />;\n  },\n};\n\nexport const cleanMessageContent = (\n  content: string,\n  memberResponses?: { content: string }[]\n): string => {\n  if (!content) return content;\n\n  let cleanedContent = content;\n\n  cleanedContent = cleanedContent\n    .replace(/^[a-f0-9-]{36}[\\s\\n\\r]*/gi, '')\n    .replace(/(?:^|\\s)[a-f0-9-]{36}(?:\\s|$)/gi, ' ')\n    .replace(/[\\s\\n\\r]*[a-f0-9-]{36}[\\s\\n\\r]*$/gi, '')\n    .trim();\n\n  if (!memberResponses?.length) return cleanedContent;\n\n  if (cleanedContent.includes('Step 1:') && cleanedContent.length > 1000) {\n    const patterns = [/Step 1:/i, /### Step 1:/i, /To create a .* Team that specializes/i, /I'll outline the team structure/i];\n    for (const pattern of patterns) {\n      const match = cleanedContent.search(pattern);\n      if (match > 0) {\n        const beforeSteps = cleanedContent.substring(0, match).trim();\n        if (beforeSteps.length > 20) {\n          cleanedContent = beforeSteps;\n          break;\n        }\n      }\n    }\n  }\n\n  memberResponses.forEach(({ content }) => {\n    if (content?.length > 50) {\n      const trimmed = content.trim();\n      if (cleanedContent.includes(trimmed)) {\n        cleanedContent = cleanedContent.replace(trimmed, '').trim();\n      } else {\n        const start = trimmed.substring(0, 200);\n        const index = cleanedContent.indexOf(start);\n        if (index !== -1) {\n          cleanedContent = cleanedContent.substring(0, index).trim();\n        }\n      }\n    }\n  });\n\n  cleanedContent = cleanedContent\n    .replace(/[a-f0-9-]{36}/gi, '')\n    .replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n')\n    .replace(/\\s{3,}/g, ' ')\n    .trim();\n\n  if (cleanedContent.length < 10 && content.length > 50) {\n    return content\n      .replace(/^[a-f0-9-]{36}[\\s\\n\\r]*/gi, '')\n      .replace(/[\\s\\n\\r]*[a-f0-9-]{36}[\\s\\n\\r]*$/gi, '')\n      .trim();\n  }\n\n  return cleanedContent || content;\n};","import React from 'react';\nimport { SequencedResponseBox } from './sequenced-response-box';\nimport type { SequencedEvent } from './sequenced-response-box';\nimport { cleanMessageContent, markdownComponents } from '../utils/chat-utils';\nimport ReactMarkdown from 'react-markdown';\n\ninterface TeamEventTimelineProps {\n    events: SequencedEvent[];\n    isStreaming?: boolean;\n}\n\nexport const TeamEventTimeline: React.FC<TeamEventTimelineProps> = ({\n    events,\n    isStreaming = false,\n}) => {\n    return (\n        <div className=\"space-y-2 mt-4\">\n            {events.map((event, index) => {\n                if (event.type === 'FinalResponse' && isStreaming) {\n                    return (\n                        <div key={`final-${index}`} className=\"mb-2\">\n                            <ReactMarkdown components={markdownComponents}>\n                                {cleanMessageContent(event.content)}\n                            </ReactMarkdown>\n                        </div>\n                    );\n                }\n\n                return (\n                    <SequencedResponseBox\n                        key={index}\n                        event={event}\n                        index={index}\n                        isStreaming={isStreaming}\n                    />\n                );\n            })}\n        </div>\n    );\n};"],"mappings":";AAAA,SAAS,YAAAA,WAAU,QAAQ,WAAW,mBAAmB;;;ACAzD,YAAY,WAAW;AACvB,SAAS,YAAY;AACrB,SAAS,WAA8B;;;ACFvC,SAAS,EAAE,GAAE;AAAC,MAAI,GAAE,GAAE,IAAE;AAAG,MAAG,YAAU,OAAO,KAAG,YAAU,OAAO;AAAE,SAAG;AAAA,WAAU,YAAU,OAAO;AAAE,QAAG,MAAM,QAAQ,CAAC,GAAE;AAAC,UAAI,IAAE,EAAE;AAAO,WAAI,IAAE,GAAE,IAAE,GAAE;AAAI,UAAE,CAAC,MAAI,IAAE,EAAE,EAAE,CAAC,CAAC,OAAK,MAAI,KAAG,MAAK,KAAG;AAAA,IAAE;AAAM,WAAI,KAAK;AAAE,UAAE,CAAC,MAAI,MAAI,KAAG,MAAK,KAAG;AAAG,SAAO;AAAC;AAAQ,SAAS,OAAM;AAAC,WAAQ,GAAE,GAAE,IAAE,GAAE,IAAE,IAAG,IAAE,UAAU,QAAO,IAAE,GAAE;AAAI,KAAC,IAAE,UAAU,CAAC,OAAK,IAAE,EAAE,CAAC,OAAK,MAAI,KAAG,MAAK,KAAG;AAAG,SAAO;AAAC;;;ACC/W,SAAS,eAAe;AAEjB,SAAS,MAAM,QAAsB;AAC1C,SAAO,QAAQ,KAAK,MAAM,CAAC;AAC7B;AAeO,IAAM,iBAAiB,CAAC,SAAyB;AAEtD,MAAI,CAAC,QAAQ,SAAS,aAAa;AACjC,WAAO;AAAA,EACT;AAGA,MAAI,SAAS,WAAW,SAAS,WAAW,SAAS,WAAW;AAC9D,WAAO;AAAA,EACT;AAEA,QAAM,SAAS;AAAA,IACb;AAAA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,MAAI;AACF,QAAI,OAAO;AACX,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,aAAO,KAAK,WAAW,CAAC,MAAM,QAAQ,KAAK;AAAA,IAC7C;AACA,WAAO,OAAO,KAAK,IAAI,IAAI,IAAI,OAAO,MAAM;AAAA,EAC9C,QAAQ;AAEN,WAAO;AAAA,EACT;AACF;;;AFtBM;AApCN,IAAM,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,IACE,UAAU;AAAA,MACR,SAAS;AAAA,QACP,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,WAAW;AAAA,QACX,OAAO;AAAA,QACP,MAAM;AAAA,MACR;AAAA,MACA,MAAM;AAAA,QACJ,SAAS;AAAA,QACT,IAAI;AAAA,QACJ,IAAI;AAAA,QACJ,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,MACf,SAAS;AAAA,MACT,MAAM;AAAA,IACR;AAAA,EACF;AACF;AAQA,IAAM,SAAe;AAAA,EACnB,CAAC,EAAE,WAAW,SAAS,MAAM,UAAU,OAAO,GAAG,MAAM,GAAG,QAAQ;AAChE,UAAM,OAAO,UAAU,OAAO;AAC9B,WACE,oBAAC,QAAK,WAAW,GAAG,eAAe,EAAE,SAAS,MAAM,UAAU,CAAC,CAAC,GAAG,KAAW,GAAG,OAAO;AAAA,EAE5F;AACF;AACA,OAAO,cAAc;;;AD5CrB,OAAOC,oBAAmB;AAC1B,OAAO,sBAAsB;AAC7B,SAAS,WAAAC,UAAS,aAAa,SAAAC,QAAO,eAAAC,cAAa,WAAW,WAAW,eAAAC,cAAa,WAAAC,UAAS,MAAM,YAAY,YAAY;AAC7H,SAAS,UAAAC,eAAc;;;AILvB,YAAYC,YAAW;AAKnB,gBAAAC,YAAA;AAFJ,IAAM,SAAe;AAAA,EACnB,CAAC,EAAE,WAAW,GAAG,MAAM,GAAG,QACxB,gBAAAA;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA,WAAW,GAAG,iEAAiE,SAAS;AAAA,MACvF,GAAG;AAAA;AAAA,EACN;AAEJ;AACA,OAAO,cAAc;AAErB,IAAM,cAAoB;AAAA,EACxB,CAAC,EAAE,WAAW,GAAG,MAAM,GAAG,QACxB,gBAAAA,KAAC,SAAI,KAAU,WAAW,GAAG,+BAA+B,SAAS,GAAI,GAAG,OAAO;AAEvF;AACA,YAAY,cAAc;AAE1B,IAAM,iBAAuB;AAAA,EAC3B,CAAC,EAAE,WAAW,GAAG,MAAM,GAAG,QACxB,gBAAAA;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA,WAAW,GAAG,+DAA+D,SAAS;AAAA,MACrF,GAAG;AAAA;AAAA,EACN;AAEJ;AACA,eAAe,cAAc;;;AJtB7B,SAAS,YAAY;;;AKNrB,YAAYC,YAAW;AACvB,YAAY,0BAA0B;AAepC,gBAAAC,MAeA,YAfA;AAVF,IAAM,cAAmC;AAIzC,IAAM,oBAAyC;AAE/C,IAAM,qBAA2B,kBAG/B,CAAC,EAAE,WAAW,GAAG,MAAM,GAAG,QAC1B,gBAAAC;AAAA,EAAsB;AAAA,EAArB;AAAA,IACC,WAAW;AAAA,MACT;AAAA,MACA;AAAA,IACF;AAAA,IACC,GAAG;AAAA,IACJ;AAAA;AACF,CACD;AACD,mBAAmB,cAAmC,6BAAQ;AAE9D,IAAM,qBAA2B,kBAG/B,CAAC,EAAE,WAAW,GAAG,MAAM,GAAG,QAC1B,qBAAC,qBACC;AAAA,kBAAAA,KAAC,sBAAmB;AAAA,EACpB,gBAAAA;AAAA,IAAsB;AAAA,IAArB;AAAA,MACC;AAAA,MACA,WAAW;AAAA,QACT;AAAA,QACA;AAAA,MACF;AAAA,MACC,GAAG;AAAA;AAAA,EACN;AAAA,GACF,CACD;AACD,mBAAmB,cAAmC,6BAAQ;AAE9D,IAAM,oBAAoB,CAAC,EAAE,WAAW,GAAG,MAAM,MAC/C,gBAAAA,KAAC,SAAI,WAAW,GAAG,oDAAoD,SAAS,GAAI,GAAG,OAAO;AAEhG,kBAAkB,cAAc;AAEhC,IAAM,oBAAoB,CAAC,EAAE,WAAW,GAAG,MAAM,MAC/C,gBAAAA;AAAA,EAAC;AAAA;AAAA,IACC,WAAW,GAAG,sEAAsE,SAAS;AAAA,IAC5F,GAAG;AAAA;AACN;AAEF,kBAAkB,cAAc;AAEhC,IAAM,mBAAyB,kBAG7B,CAAC,EAAE,WAAW,GAAG,MAAM,GAAG,QAC1B,gBAAAA;AAAA,EAAsB;AAAA,EAArB;AAAA,IACC;AAAA,IACA,WAAW,GAAG,qCAAqC,SAAS;AAAA,IAC3D,GAAG;AAAA;AACN,CACD;AACD,iBAAiB,cAAmC,2BAAM;AAE1D,IAAM,yBAA+B,kBAGnC,CAAC,EAAE,WAAW,GAAG,MAAM,GAAG,QAC1B,gBAAAA;AAAA,EAAsB;AAAA,EAArB;AAAA,IACC;AAAA,IACA,WAAW,GAAG,8BAA8B,SAAS;AAAA,IACpD,GAAG;AAAA;AACN,CACD;AACD,uBAAuB,cAAmC,iCAAY;AAEtE,IAAM,oBAA0B,kBAG9B,CAAC,EAAE,WAAW,GAAG,MAAM,GAAG,QAC1B,gBAAAA;AAAA,EAAsB;AAAA,EAArB;AAAA,IACC;AAAA,IACA,WAAW;AAAA,MACT,eAAe;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA,IACC,GAAG;AAAA;AACN,CACD;AACD,kBAAkB,cAAmC,4BAAO;AAE5D,IAAM,oBAA0B,kBAG9B,CAAC,EAAE,WAAW,GAAG,MAAM,GAAG,QAC1B,gBAAAA;AAAA,EAAsB;AAAA,EAArB;AAAA,IACC;AAAA,IACA,WAAW;AAAA,MACT,eAAe,EAAE,SAAS,UAAU,CAAC;AAAA,MACrC;AAAA,MACA;AAAA,IACF;AAAA,IACC,GAAG;AAAA;AACN,CACD;AACD,kBAAkB,cAAmC,4BAAO;;;ACvFrD,IAAM,kBAAkB,CAC3B,QACA,yBACA,yBACoB;AACpB,QAAM,aAAgC,CAAC;AAEvC,QAAM,WAGF,CAAC;AAEL,QAAM,qBAA2C,CAAC;AAElD,aAAW,SAAS,QAAQ;AACxB,QAAI,MAAM,SAAS,cAAc;AAC7B,iBAAW,KAAK,EAAE,MAAM,aAAa,CAAC;AAAA,IAC1C;AAEA,QAAI,MAAM,SAAS,mBAAmB;AAClC,YAAM,QAAQ,MAAM,MAAM,SAAS,CAAC;AACpC,YAAM,QAAQ,CAAC,SAAc;AACzB,cAAM,WAAW,SAAS,KAAK,YAAY,KAAK,CAAC;AACjD,iBAAS,KAAK,YAAY,IAAI;AAAA,UAC1B,GAAG;AAAA,UACH,MAAM;AAAA,UACN,WAAW,KAAK,aAAa,KAAK,QAAQ;AAAA,UAC1C,WAAW,KAAK,aAAa,KAAK,aAAa,CAAC;AAAA,UAChD,YAAY,KAAK,cAAc,MAAM,aAAa,KAAK,IAAI;AAAA,QAC/D;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,QAAI,MAAM,SAAS,qBAAqB;AACpC,YAAM,QAAQ,MAAM,MAAM,SAAS,CAAC,MAAM,IAAI;AAC9C,YAAM,QAAQ,CAAC,SAAc;AACzB,cAAM,WAAW,SAAS,KAAK,YAAY,KAAK,CAAC;AACjD,cAAM,WAAW,KAAK,WAAW,aAAa,KAAK,WAAW;AAE9D,cAAM,wBACF,MAAM,MAAM,sBAAsB;AAAA,UAAO,CAAC,SACtC,YAAY,KAAK,SAAS,QAAQ;AAAA,QACtC,KAAK,CAAC;AAEV,iBAAS,KAAK,YAAY,IAAI;AAAA,UAC1B,GAAG;AAAA,UACH,MAAM;AAAA,UACN,WAAW,KAAK,aAAa,KAAK,QAAQ;AAAA,UAC1C,WAAW,KAAK,aAAa,KAAK,aAAa,CAAC;AAAA,UAChD,QAAQ,KAAK,UAAU,KAAK,UAAU;AAAA,UACtC,OAAO,KAAK;AAAA,UACZ,YAAY,UAAU,cAAc,KAAK,cAAc,MAAM;AAAA,UAC7D,cAAc,KAAK,IAAI;AAAA,UACvB,iBAAiB,MAAM,KAAK,oBAAI,IAAI;AAAA,YAChC,GAAI,SAAS,mBAAmB,CAAC;AAAA,YACjC,GAAG;AAAA,UACP,CAAC,CAAC;AAAA,QACN;AAEA,eAAO,mBAAmB,KAAK,YAAY;AAAA,MAC/C,CAAC;AAAA,IACL;AAEA,QAAI,MAAM,SAAS,iBAAiB,MAAM,SAAS,kBAAkB;AACjE,YAAM,UAAU,MAAM,MAAM,oBAAoB,CAAC,MAAM,IAAI;AAC3D,cAAQ,QAAQ,CAAC,MAAW;AACxB,UAAE,OAAO,QAAQ,CAAC,SAAc;AAC5B,cAAI,KAAK,WAAW,eAAe,KAAK,WAAW,QAAQ;AACzD,+BAAmB,KAAK,YAAY,IAAI;AAAA,UAC1C;AAAA,QACF,CAAC;AAEH,mBAAW,KAAK;AAAA,UACZ,MAAM;AAAA,UACN,aAAa,qBAAqB,EAAE,WAAW,EAAE,WAAW;AAAA,UAC5D,SAAS,EAAE;AAAA,UACX,OAAO,EAAE;AAAA,UACT,OAAO,EAAE;AAAA,UACT,YAAY,EAAE;AAAA,QAClB,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA,EACJ;AAEA,SAAO,OAAO,QAAQ,EAAE,QAAQ,CAAC,SAAS;AACtC,QACI,KAAK,SAAS,aACd,KAAK,aACL,KAAK,aACL,OAAO,KAAK,eAAe,UAC7B;AACE,iBAAW,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,WAAW,KAAK;AAAA,QAChB,WAAW,KAAK;AAAA,QAChB,QAAQ,KAAK;AAAA,QACb,OAAO,KAAK;AAAA,QACZ,YAAY,KAAK;AAAA,QACjB,cAAc,KAAK,gBAAgB;AAAA,QACnC,iBAAiB,KAAK,mBAAmB,CAAC;AAAA,MAC9C,CAAC;AAAA,IACL;AAAA,EACJ,CAAC;AAED,MAAI,yBAAyB,KAAK,GAAG;AACjC,eAAW,KAAK,EAAE,MAAM,iBAAiB,SAAS,wBAAwB,KAAK,EAAE,CAAC;AAAA,EACtF;AAEA,SAAO;AACX;;;ACxIA,OAAOC,UAAS,gBAAgB;AAChC,SAAS,aAAa,aAAa,SAAS,SAAS,aAAa;AAClE,SAAS,cAAc;AACvB,OAAO,mBAAmB;AAoEZ,SA8G8B,UA9G9B,OAAAC,MAsBM,QAAAC,aAtBN;AA7BP,IAAM,uBAA4D,CAAC,EAAE,OAAO,YAAY,MAAM;AACjG,QAAM,CAAC,UAAU,WAAW,IAAI,SAAS,WAAW;AACpD,QAAM,4BAA4BF,OAAM,OAAO,KAAK;AAEpD,EAAAA,OAAM,UAAU,MAAM;AAClB,QAAI,MAAM,SAAS,WAAW;AAC1B,YAAM,OAAO;AACb,YAAM,cAAc,KAAK,iBAAiB,MAAM,KAAK,WAAW,UAAU,CAAC,KAAK;AAGhF,UAAI,eAAe,eAAe,CAAC,0BAA0B,SAAS;AAClE,oBAAY,KAAK;AACjB,kCAA0B,UAAU;AAAA,MACxC;AAGA,UAAI,CAAC,eAAe,YAAY,CAAC,aAAa;AAC1C,oBAAY,KAAK;AACjB,kCAA0B,UAAU;AAAA,MACxC;AAAA,IACJ,WAAW,CAAC,eAAe,UAAU;AACjC,kBAAY,KAAK;AAAA,IACrB;AAAA,EACJ,GAAG,CAAC,aAAa,KAAK,CAAC;AAEvB,QAAM,iBAAiB,MAAM,YAAY,UAAQ,CAAC,IAAI;AAEtD,QAAM,cAAc,CAAC,QACjB,OAAO,QAAQ,YAAY,IAAI,WAAW,MAAM,IAC1C,gBAAAC,KAAC,OAAE,MAAM,KAAK,WAAU,2BAA0B,QAAO,UAAU,eAAI,IACvE,gBAAAA,KAAC,UAAM,iBAAO,GAAG,EAAE,QAAQ,MAAM,GAAG,GAAE;AAEhD,QAAM,gBAAgB,CAAC,cAA4B;AAC/C,UAAM,EAAE,WAAW,WAAW,QAAQ,OAAO,aAAa,IAAI;AAE9D,UAAM,oBACF,OAAO,UAAU,cAAc,WACzB,UAAU,UACP,QAAQ,SAAS,GAAG,EACpB,QAAQ,SAAS,CAAC,MAAc,EAAE,YAAY,CAAC,IAClD;AAEV,UAAM,oBAAoB,UACrB,QAAQ,aAAa,UAAU,EAC/B,QAAQ,MAAM,GAAG,EACjB,QAAQ,cAAc,iBAAiB;AAE5C,WACI,gBAAAC,MAAC,SAAI,WAAU,sDAEX;AAAA,sBAAAA,MAAC,SAAI,WAAU,gGACX;AAAA,wBAAAA,MAAC,SAAI,WAAU,iEACV;AAAA,kBACG,gBAAAD,KAAC,WAAQ,WAAU,wBAAuB,IAC1C,gBAAgB,iBAAiB,MAAM,WAAW,SAClD,gBAAAA,KAAC,eAAY,WAAU,0BAAyB,IAEhD,gBAAAA,KAAC,WAAQ,WAAU,sCAAqC;AAAA,UAE3D;AAAA,WACL;AAAA,QACA,gBAAAC,MAAC,YAAO,SAAS,gBAAgB,WAAU,iDACtC;AAAA,qBAAW,SAAS;AAAA,UAAO;AAAA,UAAC,gBAAAD,KAAC,eAAY,WAAW,WAAW,WAAW,eAAe,EAAE,IAAI;AAAA,WACpG;AAAA,SACJ;AAAA,MAGC,YACG,gBAAAC,MAAC,SAAI,WAAU,kEAEX;AAAA,wBAAAA,MAAC,SAAI,WAAU,eAAc;AAAA;AAAA,UAGxB,gBAAgB,iBAAiB,KAC5B,IAAI,OAAO,IAAI,KAAK,YAAY,GAAG,UAAU,CAAC,KAC9C;AAAA,WACV;AAAA,QACA,gBAAAA,MAAC,SAAI,WAAU,gBACX;AAAA,0BAAAD,KAAC,SAAI,WAAU,oBAAmB,yBAAW;AAAA,UAC7C,gBAAAA,KAAC,QAAG,WAAU,4BACT,iBAAO,QAAQ,SAAS,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,MACvC,gBAAAC,MAAC,QACG;AAAA,4BAAAA,MAAC,UAAK,WAAU,iBAAiB;AAAA,kBAAI,QAAQ,MAAM,GAAG;AAAA,cAAE;AAAA,eAAC;AAAA,YAAQ;AAAA,YAChE,OAAO,UAAU,WACZ,MAAM,QAAQ,SAAS,GAAG,EAAE,QAAQ,SAAS,OAAK,EAAE,YAAY,CAAC,IACjE,YAAY,KAAK;AAAA,eAJlB,GAKT,CACH,GACL;AAAA,WACJ;AAAA,QACC,gBAAgB,iBAAiB,MAAM,UAAU,SAAS,UAAU,KAAK,CAAC,SAAS,WAAW,UAAU,UAAU,iBAAiB,SAChI,gBAAAD,KAAC,SAAI,WAAU,8GACV,oBAAU,gBAAgB,IAAI,CAAC,MAAM,MAClC,gBAAAA,KAAC,SACI,eAAK,QAAQ,4BAA4B,yBAAyB,KAD7D,CAEV,CACH,GACL,IAEA,gBAAAC,MAAC,SAAI,WAAU,2BACV;AAAA,kBACG,gBAAAD,KAAC,WAAQ,WAAU,wBAAuB,IAC1C,gBAAgB,iBAAiB,MAAM,WAAW,SAClD,gBAAAA,KAAC,eAAY,WAAU,0BAAyB,IAEhD,gBAAAA,KAAC,WAAQ,WAAU,sCAAqC;AAAA,UAE5D,gBAAAA,KAAC,UAAK,WAAU,yBACX,kBAAQ,UAAU,gBAAgB,iBAAiB,MAAM,WAAW,SAAS,cAAc,WAChG;AAAA,WACJ;AAAA,QAEH,UAAU,WAAW,SAClB,gBAAAA,KAAC,SAAI,WAAU,0BACT,iBAAM;AACJ,cAAI;AAEA,kBAAM,UAAU,OAAO,KAAK;AAG5B,kBAAM,gBAAgB,MAAM;AACxB,kBAAI,QAAQ,CAAC;AACb,uBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,sBAAM,OAAO,QAAQ,CAAC;AACtB,oBAAI,SAAS,OAAO,SAAS;AAAK,wBAAM,KAAK,IAAI;AACjD,oBAAI,SAAS,OAAO,SAAS;AAAK,wBAAM,IAAI;AAC5C,oBAAI,MAAM,WAAW,MAAM,SAAS,OAAO,SAAS,MAAM;AACtD,yBAAO,IAAI;AAAA,gBACf;AAAA,cACJ;AACA,qBAAO;AAAA,YACX,GAAG;AAEH,kBAAM,WAAW,QAAQ,MAAM,GAAG,YAAY,EAAE,KAAK;AACrD,kBAAM,eAAe,QAAQ,MAAM,YAAY,EAAE,KAAK;AAEtD,kBAAM,aAAa,KAAK,MAAM,QAAQ;AAEtC,mBACI,gBAAAC,MAAA,YAEI;AAAA,8BAAAD,KAAC,SAAI,WAAU,qGACX,0BAAAA,KAAC,UAAM,eAAK,UAAU,YAAY,MAAM,CAAC,GAAE,GAC/C;AAAA,cAGC,gBACG,gBAAAA,KAAC,SAAI,WAAU,6CACX,0BAAAA;AAAA,gBAAC;AAAA;AAAA,kBACG,UAAU;AAAA,kBACV,YAAY;AAAA,oBACR,GAAG,CAAC,EAAE,SAAS,MACX,gBAAAA,KAAC,OAAE,WAAU,iEACR,UACL;AAAA,oBAEJ,MAAM,CAAC,EAAE,SAAS,MACd,gBAAAA,KAAC,UAAK,WAAU,wCAAwC,UAAS;AAAA,oBAErE,IAAI,CAAC,EAAE,SAAS,MACZ,gBAAAA,KAAC,QAAG,WAAU,kBAAkB,UAAS;AAAA,oBAE7C,IAAI,CAAC,EAAE,SAAS,MACZ,gBAAAA,KAAC,QAAG,WAAU,qCAAqC,UAAS;AAAA,oBAEhE,IAAI,CAAC,EAAE,SAAS,MACZ,gBAAAA,KAAC,QAAG,WAAU,qCAAqC,UAAS;AAAA,kBAEpE;AAAA;AAAA,cACJ,GACJ;AAAA,eAER;AAAA,UAER,SAAS,KAAK;AAEV,gBAAI,YAAY,KAAK,MAAM,GAAG;AAC1B,qBAAO,MAAM;AAAA,gBACT,IAAI;AAAA,kBACA,OACK,MAAM,gBAAgB,EACtB,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,OAAO,EAAE,CAAC;AAAA,gBAC/C;AAAA,cACJ,EACK,OAAO,CAAC,MAAM,CAAC,EACf,IAAI,CAAC,MAAM,MACR,gBAAAA;AAAA,gBAAC;AAAA;AAAA,kBAEG,WAAU;AAAA,kBAET,eAAK,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,MAAM;AAC/B,0BAAM,QAAQ,KAAK,MAAM,+CAA+C;AACxE,wBAAI,OAAO;AACP,6BACI,gBAAAC,MAAC,SACG;AAAA,wCAAAA,MAAC,UAAK,WAAU,iBAAiB;AAAA,gCAAM,CAAC;AAAA,0BAAE;AAAA,2BAAC;AAAA,wBAAQ;AAAA,wBACnD,gBAAAD;AAAA,0BAAC;AAAA;AAAA,4BACG,UAAU,MAAM,CAAC;AAAA,4BACjB,YAAY;AAAA,8BACR,GAAG,CAAC,EAAE,SAAS,MACX,gBAAAA,KAAC,UAAK,WAAU,iCACX,UACL;AAAA,4BAER;AAAA;AAAA,wBACJ;AAAA,2BAXM,CAYV;AAAA,oBAER,OAAO;AACH,6BACI,gBAAAA;AAAA,wBAAC;AAAA;AAAA,0BAEG,UAAU;AAAA,0BACV,YAAY;AAAA,4BACR,GAAG,CAAC,EAAE,SAAS,MACX,gBAAAA,KAAC,OAAE,WAAU,iEACR,UACL;AAAA,0BAER;AAAA;AAAA,wBARK;AAAA,sBAST;AAAA,oBAER;AAAA,kBACJ,CAAC;AAAA;AAAA,gBApCI;AAAA,cAqCT,CACH;AAAA,YACT,OAAO;AAEH,qBACI,gBAAAA,KAAC,SAAI,WAAU,6CACX,0BAAAA;AAAA,gBAAC;AAAA;AAAA,kBACG,UAAU;AAAA,kBACV,YAAY;AAAA,oBACR,KAAK,CAAC,EAAE,SAAS,MACb,gBAAAA,KAAC,SAAI,WAAU,sGACV,UACL;AAAA,oBAEJ,MAAM,CAAC,EAAE,SAAS,MACd,gBAAAA,KAAC,UAAK,WAAU,wCAAwC,UAAS;AAAA,oBAErE,GAAG,CAAC,EAAE,SAAS,MACX,gBAAAA,KAAC,OAAE,WAAU,iEACR,UACL;AAAA,oBAEJ,IAAI,CAAC,EAAE,SAAS,MAAM,gBAAAA,KAAC,QAAG,WAAU,kBAAkB,UAAS;AAAA,oBAC/D,IAAI,CAAC,EAAE,SAAS,MAAM,gBAAAA,KAAC,QAAG,WAAU,qCAAqC,UAAS;AAAA,oBAClF,IAAI,CAAC,EAAE,SAAS,MAAM,gBAAAA,KAAC,QAAG,WAAU,qCAAqC,UAAS;AAAA,kBACtF;AAAA;AAAA,cACJ,GACJ;AAAA,YAER;AAAA,UACJ;AAAA,QACJ,GAAG,GACP,IAEA,gBAAAA,KAAC,SAAI,WAAU,sDAAqD,yBAEpE;AAAA,SAER;AAAA,OAER;AAAA,EAER;AAEA,QAAM,uBAAuB,CAAC,gBAAqC;AAC/D,UAAM,EAAE,aAAa,SAAS,OAAO,OAAO,WAAW,IAAI;AAE3D,WACI,gBAAAC,MAAC,SAAI,WAAU,iDACX;AAAA,sBAAAA,MAAC,SAAI,WAAU,qCACX;AAAA,wBAAAA,MAAC,SAAI,WAAU,2BACX;AAAA,0BAAAD,KAAC,SAAM,WAAU,iCAAgC;AAAA,UACjD,gBAAAA,KAAC,UAAK,WAAU,yCAAyC,uBAAY;AAAA,UACpE,SACG,gBAAAA,KAAC,UAAK,WAAU,8DACX,iBACL;AAAA,WAER;AAAA,QACA,gBAAAC;AAAA,UAAC;AAAA;AAAA,YACG,SAAS;AAAA,YACT,WAAU;AAAA,YAET;AAAA,yBAAW,SAAS;AAAA,cAAQ;AAAA,cAC7B,gBAAAD,KAAC,eAAY,WAAW,gCAAgC,WAAW,eAAe,EAAE,IAAI;AAAA;AAAA;AAAA,QAC5F;AAAA,SACJ;AAAA,MAEC,YACG,gBAAAC,MAAC,SAAI,WAAU,gCACX;AAAA,wBAAAD;AAAA,UAAC;AAAA;AAAA,YACG,UAAU;AAAA,YACV,YAAY;AAAA,cACR,GAAG,CAAC,EAAE,SAAS,MACX,gBAAAA,KAAC,OAAE,WAAU,mDAAmD,UAAS;AAAA,YAEjF;AAAA;AAAA,QACJ;AAAA,QAEC,SAAS,MAAM,SAAS,KACrB,gBAAAC,MAAC,SAAI,WAAU,sCACX;AAAA,0BAAAD,KAAC,UAAK,WAAU,eAAc,yBAAW;AAAA,UAAQ;AAAA,UAChD,MAAM,IAAI,CAAC,MAAM,EAAE,aAAa,EAAE,QAAQ,cAAc,EAAE,KAAK,IAAI;AAAA,WACxE;AAAA,QAGH,cACG,gBAAAC,MAAC,SAAI,WAAU,sCAAqC;AAAA;AAAA,UAC5C,OAAO,IAAI,KAAK,UAAU,GAAG,UAAU;AAAA,WAC/C;AAAA,SAER;AAAA,OAER;AAAA,EAER;AAEA,QAAM,mBAAmB,MACrB,gBAAAD,KAAC,SAAI,WAAU,sCAAqC,sCAAiB;AAGzE,MAAI,MAAM,SAAS;AAAW,WAAO,cAAc,KAAK;AACxD,MAAI,MAAM,SAAS;AAAkB,WAAO,qBAAqB,KAAK;AACtE,MAAI,MAAM,SAAS;AAAc,WAAO,iBAAiB;AAEzD,SAAO;AACX;;;AC9WM,gBAAAE,YAAA;AAJC,IAAM,qBAAiC;AAAA,EAC5C,KAAK,OAAO;AACV,UAAM,EAAE,WAAW,UAAU,GAAG,KAAK,IAAI;AACzC,WACE,gBAAAA,KAAC,UAAK,WAAW,GAAG,aAAa,EAAE,oDAAqD,GAAG,MACxF,UACH;AAAA,EAEJ;AAAA,EACA,IAAI,OAAO;AACT,UAAM,EAAE,UAAU,GAAG,KAAK,IAAI;AAC9B,WACE,gBAAAA,KAAC,SAAI,WAAU,yEAAyE,GAAG,MACxF,UACH;AAAA,EAEJ;AAAA,EACA,GAAG,OAAO;AACR,WAAO,gBAAAA,KAAC,QAAG,WAAU,uBAAuB,GAAG,OAAO;AAAA,EACxD;AAAA,EACA,GAAG,OAAO;AACR,WAAO,gBAAAA,KAAC,QAAG,WAAU,0BAA0B,GAAG,OAAO;AAAA,EAC3D;AAAA,EACA,GAAG,OAAO;AACR,WAAO,gBAAAA,KAAC,QAAG,WAAU,QAAQ,GAAG,OAAO;AAAA,EACzC;AAAA,EACA,EAAE,OAAO;AACP,WAAO,gBAAAA,KAAC,OAAE,WAAU,QAAQ,GAAG,OAAO;AAAA,EACxC;AACF;AAEO,IAAM,sBAAsB,CACjC,SACA,oBACW;AACX,MAAI,CAAC;AAAS,WAAO;AAErB,MAAI,iBAAiB;AAErB,mBAAiB,eACd,QAAQ,6BAA6B,EAAE,EACvC,QAAQ,mCAAmC,GAAG,EAC9C,QAAQ,sCAAsC,EAAE,EAChD,KAAK;AAER,MAAI,CAAC,iBAAiB;AAAQ,WAAO;AAErC,MAAI,eAAe,SAAS,SAAS,KAAK,eAAe,SAAS,KAAM;AACtE,UAAM,WAAW,CAAC,YAAY,gBAAgB,yCAAyC,kCAAkC;AACzH,eAAW,WAAW,UAAU;AAC9B,YAAM,QAAQ,eAAe,OAAO,OAAO;AAC3C,UAAI,QAAQ,GAAG;AACb,cAAM,cAAc,eAAe,UAAU,GAAG,KAAK,EAAE,KAAK;AAC5D,YAAI,YAAY,SAAS,IAAI;AAC3B,2BAAiB;AACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,kBAAgB,QAAQ,CAAC,EAAE,SAAAC,SAAQ,MAAM;AACvC,QAAIA,UAAS,SAAS,IAAI;AACxB,YAAM,UAAUA,SAAQ,KAAK;AAC7B,UAAI,eAAe,SAAS,OAAO,GAAG;AACpC,yBAAiB,eAAe,QAAQ,SAAS,EAAE,EAAE,KAAK;AAAA,MAC5D,OAAO;AACL,cAAM,QAAQ,QAAQ,UAAU,GAAG,GAAG;AACtC,cAAM,QAAQ,eAAe,QAAQ,KAAK;AAC1C,YAAI,UAAU,IAAI;AAChB,2BAAiB,eAAe,UAAU,GAAG,KAAK,EAAE,KAAK;AAAA,QAC3D;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AAED,mBAAiB,eACd,QAAQ,mBAAmB,EAAE,EAC7B,QAAQ,iBAAiB,MAAM,EAC/B,QAAQ,WAAW,GAAG,EACtB,KAAK;AAER,MAAI,eAAe,SAAS,MAAM,QAAQ,SAAS,IAAI;AACrD,WAAO,QACJ,QAAQ,6BAA6B,EAAE,EACvC,QAAQ,sCAAsC,EAAE,EAChD,KAAK;AAAA,EACV;AAEA,SAAO,kBAAkB;AAC3B;;;ACxFA,OAAOC,oBAAmB;AAiBE,gBAAAC,YAAA;AAVrB,IAAM,oBAAsD,CAAC;AAAA,EAChE;AAAA,EACA,cAAc;AAClB,MAAM;AACF,SACI,gBAAAA,KAAC,SAAI,WAAU,kBACV,iBAAO,IAAI,CAAC,OAAO,UAAU;AAC1B,QAAI,MAAM,SAAS,mBAAmB,aAAa;AAC/C,aACI,gBAAAA,KAAC,SAA2B,WAAU,QAClC,0BAAAA,KAACD,gBAAA,EAAc,YAAY,oBACtB,8BAAoB,MAAM,OAAO,GACtC,KAHM,SAAS,KAAK,EAIxB;AAAA,IAER;AAEA,WACI,gBAAAC;AAAA,MAAC;AAAA;AAAA,QAEG;AAAA,QACA;AAAA,QACA;AAAA;AAAA,MAHK;AAAA,IAIT;AAAA,EAER,CAAC,GACL;AAER;;;AT+NI,gBAAAC,MA+lCM,QAAAC,aA/lCN;AAvHG,IAAM,oBAAoB,CAAC;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAA8B;AAC5B,QAAM,CAAC,UAAU,WAAW,IAAIC,UAAoB,CAAC,CAAC;AACtD,QAAM,CAAC,OAAO,QAAQ,IAAIA,UAAS,EAAE;AACrC,QAAM,CAAC,WAAW,YAAY,IAAIA,UAAS,KAAK;AAChD,QAAM,CAAC,qBAAqB,sBAAsB,IAAIA,UAAS,KAAK;AACpE,QAAM,CAAC,WAAW,YAAY,IAAIA,UAA6B,gBAAgB;AAC/E,QAAM,CAAC,yBAAyB,0BAA0B,IAAIA,UAAS,EAAE;AACzE,QAAM,CAAC,kBAAkB,mBAAmB,IAAIA,UAAS,KAAK;AAC9D,QAAM,iBAAiB,OAAuB,IAAI;AAClD,QAAM,eAAe,OAAqC,IAAI;AAC9D,QAAM,sBAAsB,OAAO,EAAE;AACrC,QAAM,cAAc,OAAkB,CAAC,CAAC;AACxC,QAAM,wBAAwB,OAAgB,KAAK;AACnD,QAAM,cAAc,OAA4B,IAAI;AACpD,QAAM,CAAC,aAAa,cAAc,IAAIA,UAAiB,+BAA+B;AACtF,QAAM,EAAE,KAAK,IAAI,aAAa;AAC9B,QAAM,CAAC,iBAAiB,kBAAkB,IAAIA,UAAS,KAAK;AAC5D,QAAM,mBAAmB,OAAuB,IAAI;AACpD,QAAM,yBAAyB,OAAO,CAAC;AAEvC,QAAM,CAAC,cAAc,eAAe,IAAIA,UAAqB,CAAC,CAAC;AAC/D,QAAM,CAAC,aAAa,cAAc,IAAIA,UAAuB,CAAC,CAAC;AAC/D,QAAM,CAAC,gBAAgB,iBAAiB,IAAIA,UAA0B,CAAC,CAAC;AACxE,QAAM,CAAC,eAAe,gBAAgB,IAAIA,UAAsB,CAAC,CAAC;AAClE,QAAM,kBAAkB,OAAmB,CAAC,CAAC;AAC7C,QAAM,qBAAqB,OAAsB,IAAI;AACrD,QAAM,mBAAmB,OAAoB,CAAC,CAAC;AAC/C,QAAM,EAAE,aAAa,IAAI,eAAe;AACxC,QAAM,CAAC,oBAAoB,qBAAqB,IAAIA,UAAS,KAAK;AAClE,QAAM,CAAC,wBAAwB,yBAAyB,IAAIA,UAA2B,CAAC,CAAC;AACzF,QAAM,4BAA4B,OAAyB,CAAC,CAAC;AAC7D,QAAM,CAAC,4BAA4B,6BAA6B,IAAIA,UAAS,KAAK;AAClF,QAAM,CAAC,mBAAmB,oBAAoB,IAAIA,UAAkC,CAAC,CAAC;AACtF,QAAM,CAAC,kCAAkC,mCAAmC,IAAIA,UAAS,KAAK;AAC9F,QAAM,CAAC,eAAe,gBAAgB,IAAIA,UAAiB,CAAC,CAAC;AAC7D,QAAM,CAAC,iBAAiB,kBAAkB,IAAIA,UAAuD,CAAC,CAAC;AACvG,QAAM,CAAC,gBAAgB,iBAAiB,IAAIA,UAAiC,CAAC,CAAC;AAC/E,QAAM,EAAE,UAAU,IAAI,SAAS;AAC/B,QAAM,eAAe,OAA2B,gBAAgB;AAGhE,QAAM,qBAAqB,CAAC,cAAsC;AAChE,QAAI,CAAC;AAAW,aAAO,oBAAI,KAAK;AAEhC,QAAI,OAAO,cAAc,UAAU;AAEjC,YAAM,OAAO,IAAI,KAAK,SAAS;AAC/B,UAAI,CAAC,MAAM,KAAK,QAAQ,CAAC;AAAG,eAAO;AAGnC,aAAO,IAAI,KAAK,SAAS,SAAS,IAAI,GAAI;AAAA,IAC5C;AAGA,WAAO,IAAI,KAAK,YAAY,GAAI;AAAA,EAClC;AAEA,QAAM,uBAAuB,CAAC,UAAkB,eAAgC;AAE9E,QAAI,cAAc,eAAe,oBAAoB,eAAe,WAAW;AAC7E,aAAO;AAAA,IACT;AAGA,UAAM,qBAA6C;AAAA,MACjD,aAAa;AAAA,MACb,iBAAiB;AAAA,MACjB,oBAAoB;AAAA,MACpB,qBAAqB;AAAA,MACrB,aAAa;AAAA,MACb,WAAW;AAAA,IACb;AAEA,WAAO,mBAAmB,QAAQ,KAAK,cAAc;AAAA,EACvD;AAEA,QAAM,wBAAwB,CAAC,YAA4B;AACzD,QAAI,CAAC;AAAS,aAAO;AAGrB,UAAM,QAAQ,QAAQ,MAAM,IAAI;AAChC,UAAM,YAAY,oBAAI,IAAY;AAClC,UAAM,eAAyB,CAAC;AAEhC,eAAW,QAAQ,OAAO;AACxB,YAAM,cAAc,KAAK,KAAK;AAG9B,UAAI,YAAY,SAAS,IAAI;AAC3B,qBAAa,KAAK,IAAI;AACtB;AAAA,MACF;AAGA,YAAM,iBAAiB,YAAY,YAAY;AAC/C,UAAI,CAAC,UAAU,IAAI,cAAc,GAAG;AAClC,kBAAU,IAAI,cAAc;AAC5B,qBAAa,KAAK,IAAI;AAAA,MACxB;AAAA,IACF;AAEA,WAAO,aAAa,KAAK,IAAI,EAAE,KAAK;AAAA,EACtC;AAGA,QAAM,cAAc,MAClB,gBAAAF;AAAA,IAAC;AAAA;AAAA,MACC,yBAAyB;AAAA,QACvB,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAqBV;AAAA;AAAA,EACF;AAGF,YAAU,MAAM;AACd,QAAI,cAAc,SAAS,WAAW,KAAK,CAAC,WAAW;AACrD,YAAM,iBAA0B;AAAA,QAC9B,IAAI;AAAA,QACJ,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,WAAW,oBAAI,KAAK;AAAA,MACtB;AACA,kBAAY,CAAC,cAAc,CAAC;AAAA,IAC9B;AAAA,EACF,GAAG,CAAC,YAAY,SAAS,QAAQ,SAAS,CAAC;AAE3C,YAAU,MAAM;AACd,gBAAY,UAAU;AAAA,EACxB,GAAG,CAAC,QAAQ,CAAC;AAEb,YAAU,MAAM;AACd,QAAI,WAAW;AACb,mBAAa,UAAU;AAAA,IACzB;AAAA,EACF,GAAG,CAAC,SAAS,CAAC;AAEd,YAAU,MAAM;AACd,8BAA0B,UAAU;AAAA,EACtC,GAAG,CAAC,sBAAsB,CAAC;AAE3B,YAAU,MAAM;AACd,QAAI,qBAAqB,WAAW;AAElC,UAAI,oBAAoB,qBAAqB,aAAa;AACxD,qBAAa,gBAAgB;AAAA,MAC/B,OAAO;AAEL,YAAI,CAAC,sBAAsB,SAAS;AAClC,sBAAY,CAAC,CAAC;AACd,uBAAa,MAAS;AAAA,QACxB;AAAA,MACF;AACA,4BAAsB,UAAU;AAAA,IAClC;AAAA,EACF,GAAG,CAAC,kBAAkB,SAAS,CAAC;AAEhC,YAAU,MAAM;AAEd,QAAI,UAAU,WAAW,aAAa;AACpC,qBAAe,eAAe,MAAM,CAAC;AAAA,IACvC;AAAA,EACF,GAAG,CAAC,MAAM,CAAC;AAEX,YAAU,MAAM;AACd,oBAAgB,UAAU;AAAA,EAC5B,GAAG,CAAC,YAAY,CAAC;AAGjB,YAAU,MAAM;AACd,QAAI,kBAAkB,CAAC,aAAa,CAAC,8BAA8B,CAAC,WAAW;AAC7E,eAAS,cAAc;AACvB,oCAA8B,IAAI;AAGlC,iBAAW,MAAM;AACf,cAAM,OAAO,SAAS,cAAc,MAAM;AAC1C,YAAI,MAAM;AACR,eAAK,cAAc,IAAI,MAAM,UAAU,EAAE,SAAS,MAAM,YAAY,KAAK,CAAC,CAAC;AAAA,QAC7E;AAAA,MACF,GAAG,GAAG;AAAA,IACR;AAAA,EACF,GAAG,CAAC,gBAAgB,WAAW,4BAA4B,SAAS,CAAC;AAErE,QAAM,sBAAsB,YAAY,OAAO,QAAgB;AAC7D,QAAI,sBAAsB,WAAW,CAAC,OAAO,QAAQ;AAAa;AAClE,wBAAoB,IAAI;AACxB,QAAI;AAEF,YAAM,CAAC,wBAAwB,gBAAgB,IAAI,MAAM,QAAQ,IAAI;AAAA,QACnE,YAAY,kBAAkB,GAAG;AAAA,QACjC,YAAY,mBAAmB,GAAG;AAAA,MACpC,CAAC;AAED,YAAM,iBAAiB,uBAAuB;AAC9C,YAAM,cAAc,iBAAiB;AACrC,YAAM,oBAA+B,CAAC;AAGtC,YAAM,cAAc,eAAe,gBAAgB,CAAC;AACpD,YAAM,iBAAiB,YAAY,GAAG,KAAK,CAAC;AAC5C,YAAM,qBAAqB,eAAe,uBAAuB,CAAC;AAElE,eAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAC3C,cAAM,MAAM,YAAY,CAAC;AAGzB,YAAI,IAAI,SAAS;AAAU;AAG3B,YAAI,IAAI,SAAS,QAAQ;AACvB,4BAAkB,KAAK;AAAA,YACrB,IAAI,WAAW,IAAI,cAAc,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,MAAM,GAAG,CAAC,CAAC;AAAA,YACrF,SAAS,IAAI,WAAW;AAAA,YACxB,QAAQ;AAAA,YACR,WAAW,mBAAmB,IAAI,UAAU;AAAA,UAC9C,CAAC;AACD;AAAA,QACF;AAGA,YAAI,IAAI,SAAS,eAAe,IAAI,SAAS,iBAAiB;AAE5D,gBAAM,uBAAuB,kBAAkB;AAAA,YAAU,iBACvD,YAAY,WAAW,UACvB,KAAK,IAAI,mBAAmB,IAAI,UAAU,EAAE,QAAQ,IAAI,YAAY,UAAU,QAAQ,CAAC,IAAI;AAAA,UAC7F;AAGA,cAAI,yBAAyB,IAAI;AAC/B,kBAAM,kBAAkB,kBAAkB,oBAAoB;AAG9D,gBAAI,IAAI,SAAS,aAAa;AAC5B,8BAAgB,YAAY,mBAAmB,IAAI,UAAU;AAAA,YAC/D;AAGA,kBAAM,aAAa,IAAI,WAAW;AAClC,kBAAM,kBAAkB,gBAAgB,WAAW;AAInD,gBAAI,WAAW,SAAS,gBAAgB,SAAS,OAC9C,WAAW,SAAS,OAAO,gBAAgB,SAAS,IAAK;AAE1D,kBAAI,CAAC,WAAW,SAAS,gBAAgB,UAAU,GAAG,KAAK,IAAI,KAAK,gBAAgB,MAAM,CAAC,CAAC,GAAG;AAC7F,gCAAgB,UAAU;AAAA,cAC5B;AAAA,YACF,WAES,gBAAgB,SAAS,MAAM,WAAW,SAAS,IAAI;AAC9D,8BAAgB,UAAU;AAAA,YAC5B,WAES,IAAI,SAAS,mBAAmB,KAAK,IAAI,WAAW,SAAS,gBAAgB,MAAM,IAAI,KAAK;AACnG,8BAAgB,UAAU;AAAA,YAC5B;AAGA,gBAAI,IAAI,oBAAoB,MAAM,QAAQ,IAAI,gBAAgB,KAAK,IAAI,iBAAiB,SAAS,GAAG;AAClG,oBAAMG,mBAAkB,IAAI,iBAAiB,IAAI,CAAC,cAAmB;AAAA,gBACnE,WAAW,SAAS,YAAY,SAAS,aAAa;AAAA,gBACtD,aAAa,qBAAqB,SAAS,YAAY,SAAS,aAAa,WAAW,SAAS,eAAe,SAAS,UAAU;AAAA,gBACnI,SAAS,sBAAsB,SAAS,WAAW,EAAE;AAAA,gBACrD,OAAO,SAAS,SAAS,CAAC;AAAA,cAC5B,EAAE;AAGF,kBAAI,CAAC,gBAAgB,mBAAmB,gBAAgB,gBAAgB,WAAW,GAAG;AACpF,gCAAgB,kBAAkBA;AAAA,cACpC;AAAA,YACF;AAGA,gBAAI,IAAI,cAAc,MAAM,QAAQ,IAAI,UAAU,GAAG;AACnD,oBAAM,WAAuB,CAAC;AAC9B,kBAAI,WAAW,QAAQ,CAAC,aAA6B;AACnD,sBAAM,eAAe,SAAS,YAAY,CAAC;AAC3C,yBAAS,KAAK;AAAA,kBACZ,MAAO,SAAS,QAAmB;AAAA,kBACnC,SAAU,SAAS,WAAsB;AAAA,kBACzC,YAAY,SAAS;AAAA,kBACrB,SAAU,SAAS,WAAuC,CAAC;AAAA,kBAC3D,WACG,aAAa,QACb,SAAS,aACT,SAAS,QACV;AAAA,kBACF,cACG,SAAS,MACT,SAAS,gBACV,QAAQ,SAAS,cAAc,KAAK,IAAI,CAAC;AAAA,kBAC3C,WACG,aAAa,aACb,SAAS,aACT,SAAS,aACV,CAAC;AAAA,kBACH,iBAAkB,SAAS,mBAA+B;AAAA,kBAC1D,MAAO,aAAa,QAAoB,SAAS,QAAmB;AAAA,kBACpE,QAAS,SAAS,UAAqB;AAAA,kBACvC,WAAW,aAAa,aAAa,SAAS,aAAa,CAAC;AAAA,kBAC5D,OAAQ,SAAS,SAAqC,CAAC;AAAA,kBACvD,WAAY,SAAS,aAAyB,SAAS;AAAA,gBACzD,CAAC;AAAA,cACH,CAAC;AAED,kBAAI,SAAS,SAAS,MAAM,CAAC,gBAAgB,SAAS,gBAAgB,MAAM,WAAW,IAAI;AACzF,gCAAgB,QAAQ;AAAA,cAC1B;AAAA,YACF;AAEA;AAAA,UACF;AAGA,gBAAM,kBAAkB,IAAI,WAAW,IAAI,KAAK;AAGhD,gBAAM,qBAAqB,kBAAkB;AAAA,YAAK,iBAChD,YAAY,WAAW,UACvB,YAAY,QAAQ,KAAK,MAAM;AAAA,UACjC;AAGA,gBAAM,mBAAmB,kBAAkB,KAAK,iBAAe;AAC7D,gBAAI,YAAY,WAAW;AAAQ,qBAAO;AAC1C,kBAAM,kBAAkB,YAAY,QAAQ,KAAK;AAGjD,gBAAI,gBAAgB,SAAS,MAAM,eAAe,SAAS;AAAI,qBAAO;AAGtE,kBAAM,iBAAiB,gBAAgB,SAAS,eAAe,SAAS,kBAAkB;AAC1F,kBAAM,gBAAgB,gBAAgB,UAAU,eAAe,SAAS,kBAAkB;AAE1F,mBAAO,cAAc,SAAS,eAAe,UAAU,GAAG,KAAK,IAAI,KAAK,eAAe,SAAS,GAAG,CAAC,CAAC;AAAA,UACvG,CAAC;AAGD,cAAI,IAAI,SAAS,gBAAgB,sBAAsB,mBAAmB;AACxE;AAAA,UACF;AAGA,cAAI,IAAI,SAAS,iBAAiB;AAChC,kBAAM,iBAAiB,kBAAkB;AAAA,cAAU,iBACjD,YAAY,WAAW,WACtB,YAAY,QAAQ,KAAK,MAAM,kBAC7B,YAAY,QAAQ,SAAS,MAAM,eAAe,SAAS,MAC1D,eAAe,SAAS,YAAY,QAAQ,UAAU,GAAG,KAAK,IAAI,KAAK,YAAY,QAAQ,SAAS,GAAG,CAAC,CAAC;AAAA,YAC/G;AAEA,gBAAI,mBAAmB,IAAI;AAEzB,gCAAkB,OAAO,gBAAgB,CAAC;AAAA,YAC5C;AAAA,UACF;AAGA,gBAAM,QAAoB,CAAC;AAC3B,cAAI,IAAI,cAAc,MAAM,QAAQ,IAAI,UAAU,GAAG;AACnD,gBAAI,WAAW,QAAQ,CAAC,aAA6B;AACnD,oBAAM,eAAe,SAAS,YAAY,CAAC;AAC3C,oBAAM,KAAK;AAAA,gBACT,MAAO,SAAS,QAAmB;AAAA,gBACnC,SAAU,SAAS,WAAsB;AAAA,gBACzC,YAAY,SAAS;AAAA,gBACrB,SAAU,SAAS,WAAuC,CAAC;AAAA,gBAC3D,WACG,aAAa,QACb,SAAS,aACT,SAAS,QACV;AAAA,gBACF,cACG,SAAS,MACT,SAAS,gBACV,QAAQ,SAAS,cAAc,KAAK,IAAI,CAAC;AAAA,gBAC3C,WACG,aAAa,aACb,SAAS,aACT,SAAS,aACV,CAAC;AAAA,gBACH,iBAAkB,SAAS,mBAA+B;AAAA,gBAC1D,MAAO,aAAa,QAAoB,SAAS,QAAmB;AAAA,gBACpE,QAAS,SAAS,UAAqB;AAAA,gBACvC,WAAW,aAAa,aAAa,SAAS,aAAa,CAAC;AAAA,gBAC5D,OAAQ,SAAS,SAAqC,CAAC;AAAA,gBACvD,WAAY,SAAS,aAAyB,SAAS;AAAA,cACzD,CAAC;AAAA,YACH,CAAC;AAAA,UACH;AAGA,cAAI,kBAAoC,CAAC;AACzC,cAAI,cAAc,IAAI,WAAW;AAEjC,cAAI,IAAI,oBAAoB,MAAM,QAAQ,IAAI,gBAAgB,GAAG;AAC/D,8BAAkB,IAAI,iBAAiB,IAAI,CAAC,cAAmB;AAAA,cAC7D,WAAW,SAAS,YAAY,SAAS,aAAa;AAAA,cACtD,aAAa,qBAAqB,SAAS,YAAY,SAAS,aAAa,WAAW,SAAS,eAAe,SAAS,UAAU;AAAA,cACnI,SAAS,sBAAsB,SAAS,WAAW,EAAE;AAAA,cACrD,OAAO,SAAS,SAAS,CAAC;AAAA,YAC5B,EAAE;AAIF,gBAAI,IAAI,SAAS,eAAe,gBAAgB,SAAS,GAAG;AAE1D,kBAAI,iBAAiB;AAGrB,+BAAiB,eAAe,QAAQ,0EAA0E,EAAE,EAAE,KAAK;AAG3H,8BAAgB,QAAQ,oBAAkB;AACxC,oBAAI,eAAe,WAAW,eAAe,QAAQ,SAAS,IAAI;AAChE,wBAAM,gBAAgB,eAAe,QAAQ,KAAK;AAGlD,sBAAI,eAAe,SAAS,aAAa,GAAG;AAE1C,qCAAiB,eAAe,QAAQ,eAAe,EAAE,EAAE,KAAK;AAAA,kBAClE,OAAO;AAEL,0BAAM,qBAAqB,cAAc,UAAU,GAAG,GAAG;AACzD,wBAAI,eAAe,SAAS,kBAAkB,GAAG;AAC/C,4BAAM,aAAa,eAAe,QAAQ,kBAAkB;AAC5D,uCAAiB,eAAe,UAAU,GAAG,UAAU,EAAE,KAAK;AAAA,oBAChE;AAAA,kBACF;AAAA,gBACF;AAAA,cACF,CAAC;AAGD,+BAAiB,eACd,QAAQ,kEAAkE,EAAE,EAC5E,QAAQ,iBAAiB,MAAM,EAC/B,KAAK;AAGR,kBAAI,eAAe,SAAS,MAAM,YAAY,SAAS,KAAK;AAC1D,8BAAc;AAAA,cAChB;AAAA,YACF;AAAA,UAEF,WAAW,mBAAmB,SAAS,GAAG;AAExC,8BAAkB,mBAAmB,IAAI,CAAC,iBAAsB;AAAA,cAC9D,WAAW,YAAY,eAAe;AAAA,cACtC,SAAS,YAAY,UAAU,WAAW,YAAY,QAAQ;AAAA,cAC9D,OAAO,YAAY,UAAU,SAAS,CAAC;AAAA,YACzC,EAAE;AAAA,UACJ;AAGA,gBAAM,cAAc,kBAAkB,kBAAkB,SAAS,CAAC;AAClE,cAAI,eAAe,YAAY,WAAW,QAAQ;AAEhD,kBAAM,aAAa,YAAY,KAAK;AACpC,kBAAM,kBAAkB,YAAY,QAAQ,KAAK;AAIjD,gBAAI,WAAW,SAAS,gBAAgB,SAAS,OAC9C,WAAW,SAAS,OAAO,gBAAgB,SAAS,IAAK;AAE1D,kBAAI,CAAC,WAAW,SAAS,gBAAgB,UAAU,GAAG,KAAK,IAAI,KAAK,gBAAgB,MAAM,CAAC,CAAC,GAAG;AAC7F,4BAAY,UAAU;AAAA,cACxB;AAAA,YACF,WAES,gBAAgB,SAAS,MAAM,WAAW,SAAS,IAAI;AAC9D,0BAAY,UAAU;AAAA,YACxB,WAES,IAAI,SAAS,mBAAmB,KAAK,IAAI,WAAW,SAAS,gBAAgB,MAAM,IAAI,KAAK;AACnG,0BAAY,UAAU;AAAA,YACxB;AAGA,gBAAI,MAAM,SAAS,GAAG;AACpB,oBAAM,mBAAmB,YAAY,SAAS,CAAC,GAAG,IAAI,OAAK,EAAE,YAAY;AACzE,oBAAM,WAAW,MAAM,OAAO,OAAK,CAAC,gBAAgB,SAAS,EAAE,YAAY,CAAC;AAC5E,kBAAI,SAAS,SAAS,GAAG;AACvB,4BAAY,QAAQ,CAAC,GAAI,YAAY,SAAS,CAAC,GAAI,GAAG,QAAQ;AAAA,cAChE;AAAA,YACF;AAGA,gBAAI,gBAAgB,SAAS,GAAG;AAC9B,oBAAM,qBAAqB,YAAY,mBAAmB,CAAC,GAAG,IAAI,OAAK,EAAE,SAAS;AAClF,oBAAM,qBAAqB,gBAAgB,OAAO,OAAK,CAAC,kBAAkB,SAAS,EAAE,SAAS,CAAC;AAC/F,kBAAI,mBAAmB,SAAS,GAAG;AACjC,4BAAY,kBAAkB,CAAC,GAAI,YAAY,mBAAmB,CAAC,GAAI,GAAG,kBAAkB;AAAA,cAC9F;AAAA,YACF;AAAA,UACF,OAAO;AAEL,kBAAM,cAAuB;AAAA,cAC3B,IAAI,WAAW,IAAI,cAAc,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,EACxD,SAAS,EAAE,EACX,MAAM,GAAG,CAAC,CAAC;AAAA,cACd,SAAS;AAAA,cACT,QAAQ;AAAA,cACR,WAAW,mBAAmB,IAAI,UAAU;AAAA,cAC5C,OAAO,MAAM,SAAS,IAAI,QAAQ,IAAI,SAAS,CAAC;AAAA;AAAA,cAEhD,iBAAiB,gBAAgB,SAAS,IAAI,kBAAkB;AAAA,YAClE;AAEA,8BAAkB,KAAK,WAAW;AAAA,UACpC;AACA;AAAA,QACF;AAAA,MACF;AAGA,wBAAkB,KAAK,CAAC,GAAG,MAAM;AAC/B,cAAM,QAAQ,EAAE,UAAU,QAAQ;AAClC,cAAM,QAAQ,EAAE,UAAU,QAAQ;AAGlC,YAAI,KAAK,IAAI,QAAQ,KAAK,IAAI,KAAM;AAClC,cAAI,EAAE,WAAW,UAAU,EAAE,WAAW;AAAQ,mBAAO;AACvD,cAAI,EAAE,WAAW,UAAU,EAAE,WAAW;AAAQ,mBAAO;AAAA,QACzD;AAEA,eAAO,QAAQ;AAAA,MACjB,CAAC;AAED,YAAM,gBAA2B,CAAC;AAClC,UAAI,kBAAkB;AAEtB,UAAI,YAAY;AACd,cAAM,kBAAkB,CAAC,GAAG,aAAa,EAAE,QAAQ,EAAE;AAAA,UACnD,SAAO,IAAI,WAAW,UAAU,OAAO,IAAI,YAAY;AAAA,QACzD;AACA,YAAI,mBAAmB,gBAAgB,SAAS;AAC9C,gBAAM,cAAc,gBAAgB,QAAQ;AAAA,YAC1C;AAAA,UACF;AAEA,gBAAM,mBAAmB,gBAAgB,QAAQ;AAAA,YAC/C;AAAA,UACF;AAEA,gBAAM,kBAAkB,cAAc,CAAC,KAAK,mBAAmB,CAAC;AAEhE,cAAI,mBAAmB,CAAC,cAAc,KAAK,SAAO,IAAI,YAAY,aAAa,eAAe,EAAE,GAAG;AACjG,kBAAM,kBAA2B;AAAA,cAC/B,IAAI,aAAa,KAAK,IAAI,CAAC;AAAA,cAC3B,SAAS,aAAa,eAAe;AAAA,cACrC,QAAQ;AAAA,cACR,WAAW,oBAAI,KAAK;AAAA,YACtB;AAEA,8BAAkB,CAAC,GAAG,eAAe,eAAe;AAAA,UACtD;AAAA,QACF;AAAA,MACF;AAEA,kBAAY,eAAe;AAAA,IAC7B,SAAS,OAAO;AACd,cAAQ,MAAM,mCAAmC,KAAK;AAAA,IACxD,UAAE;AACA,0BAAoB,KAAK;AAAA,IAC3B;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,YAAU,MAAM;AACd,QACE,aACA,cAAc,eACd,CAAC,sBAAsB,SACvB;AACA,0BAAoB,SAAS;AAAA,IAC/B;AAAA,EACF,GAAG,CAAC,WAAW,mBAAmB,CAAC;AAEnC,QAAM,eAAe,CAAC,WAAmB;AACvC,QAAI,CAAC;AAAQ;AAEb,QAAI;AACF,YAAM,cAAc,OAAO,MAAM,0CAA0C;AAC3E,UAAI,aAAa;AACf,mBAAW,SAAS,aAAa;AAC/B,cAAI;AACF,kBAAM,SAAS,KAAK,MAAM,KAAK;AAC/B,gBAAI,OAAO,WAAW,OAAO,QAAQ,KAAK,MAAM,IAAI;AAClD,kBAAI,WAAW,OAAO;AACtB,kBAAI,CAAC,SAAS,SAAS,gBAAgB,GAAG;AACxC,6BAAa,SAAS,SAAS,GAAG,IAAI,MAAM,OAAO;AAAA,cACrD;AACA,sBAAQ,IAAI,0BAA0B,QAAQ;AAC9C,wBAAU,QAAQ;AAClB,8BAAgB,IAAI;AACpB;AAAA,YACF;AAAA,UACF,SAAS,KAAK;AACZ,oBAAQ,KAAK,+BAA+B,GAAG;AAAA,UACjD;AAAA,QACF;AAAA,MACF;AAEA,YAAM,mBAAmB,OAAO,MAAM,yCAAyC;AAC/E,UAAI,kBAAkB;AACpB,cAAM,MAAM,iBAAiB,CAAC,EAAE,MAAM,GAAG,EAAE;AAC3C,YAAI,WAAW;AACf,YAAI,CAAC,SAAS,SAAS,gBAAgB,GAAG;AACxC,uBAAa,SAAS,SAAS,GAAG,IAAI,MAAM,OAAO;AAAA,QACrD;AACA,gBAAQ,IAAI,8BAA8B,QAAQ;AAClD,kBAAU,QAAQ;AAClB,wBAAgB,IAAI;AAAA,MACtB;AAAA,IAEF,SAAS,KAAK;AACZ,cAAQ,KAAK,8CAA8C,GAAG;AAAA,IAChE;AAAA,EACF;AAEA,YAAU,MAAM;AACd,eAAW,OAAO,UAAU;AAC1B,UAAI,CAAC,IAAI;AAAiB;AAC1B,iBAAW,UAAU,IAAI,iBAAiB;AACxC,mBAAW,QAAQ,OAAO,SAAS,CAAC,GAAG;AACrC,gBAAM,OAAO,KAAK,UAAU,KAAK;AACjC,cAAI,OAAO,SAAS,UAAU;AAC5B,yBAAa,IAAI;AAAA,UACnB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF,GAAG,CAAC,QAAQ,CAAC;AAEb,QAAM,mBAAmB,MAAM;AAC7B,QAAI,aAAa,SAAS;AACxB,mBAAa,QAAQ,MAAM;AAC3B,mBAAa,UAAU;AAAA,IACzB;AAAA,EACF;AAEA,QAAM,0BAA0B,OAAO,MAAuB;AAC5D,MAAE,eAAe;AACjB,QAAI,CAAC,MAAM,KAAK,KAAK;AAAW;AAGhC,UAAM,oBAAoB,cAAc,SAAS;AACjD,QAAI,mBAAmB;AACrB,gBAAU,2CAA2C;AACrD;AAAA,IACF;AAEA,UAAM,gBAAgB,QAAQ,KAAK,IAAI,CAAC;AACxC,UAAM,cAAuB;AAAA,MAC3B,IAAI;AAAA,MACJ,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,WAAW,oBAAI,KAAK;AAAA,MACpB,SAAS,gBAAgB,SAAS,IAAI,gBAAgB,IAAI,OAAK,EAAE,EAAE,IAAI;AAAA,IACzE;AAEA,gBAAY,CAAC,SAAS,CAAC,GAAG,MAAM,WAAW,CAAC;AAC5C,aAAS,EAAE;AACX,iBAAa,IAAI;AACjB,2BAAuB,IAAI;AAG3B,oBAAgB,CAAC,CAAC;AAClB,mBAAe,CAAC,CAAC;AACjB,sBAAkB,CAAC,CAAC;AACpB,qBAAiB,CAAC,CAAC;AAEnB,8BAA0B,CAAC,CAAC;AAC5B,+BAA2B,EAAE;AAC7B,wBAAoB,UAAU;AAG9B,eAAW,MAAM,YAAY,SAAS,MAAM,GAAG,CAAC;AAGhD,UAAM,aAAa,QAAQ,KAAK,IAAI,CAAC;AACrC,uBAAmB,UAAU;AAE7B,QAAI;AACF,YAAM,UAAU,gBAAgB,IAAI,OAAK,EAAE,EAAE;AAG7C,YAAM,eAAe,aAAa,WAAW;AAC7C,YAAM,aAAa,YAAY;AAAA,QAC7B;AAAA,QACA;AAAA,QACA;AAAA,QACA,CAAC,YAAY;AAEX,cAAI,CAAC,WAAW,QAAQ,KAAK,MAAM,iBAAiB,QAAQ,SAAS,aAAa,GAAG;AACnF;AAAA,UACF;AAGA,gBAAM,iBAAiB,QAAQ,QAAQ,mBAAmB,EAAE;AAE5D,8BAAoB,WAAW;AAC/B,qCAA2B,oBAAoB,OAAO;AAAA,QACxD;AAAA,QACA,CAAC,WAAW,SAAS;AAEnB,kBAAQ,IAAI,wBAAwB,WAAW,IAAI;AAGnD,cAAI,cAAc,gBAAgB;AAChC,oBAAQ,IAAI,yDAAyD;AACrE;AAAA,UACF;AAGA,gBAAM,WAAsB;AAAA,YAC1B,MAAM;AAAA,YACN,WAAW,KAAK,IAAI;AAAA,YACpB;AAAA,UACF;AACA,2BAAiB,UAAQ;AACvB,kBAAM,UAAU,CAAC,GAAG,MAAM,QAAQ;AAClC,6BAAiB,UAAU;AAC3B,mBAAO;AAAA,UACT,CAAC;AAED,cAAI,cAAc,mBAAmB;AAEnC,gBAAI,KAAK,SAAS,MAAM,QAAQ,KAAK,KAAK,GAAG;AAC3C,oBAAM,iBAA+B,KAAK,MAAM,IAAI,CAAC,UAAe;AAAA,gBAClE,cAAc,KAAK,gBAAgB,QAAQ,KAAK,IAAI,CAAC;AAAA,gBACrD,WAAW,KAAK,aAAa,KAAK,QAAQ;AAAA,gBAC1C,WAAW,KAAK,aAAa,KAAK,aAAa,CAAC;AAAA,gBAChD,YAAY,KAAK,cAAc,KAAK,IAAI;AAAA,gBACxC,QAAQ;AAAA,cACV,EAAE;AAEF,6BAAe,UAAQ;AACrB,sBAAM,WAAW,KAAK;AAAA,kBAAO,OAC3B,CAAC,eAAe,KAAK,QAAM,GAAG,iBAAiB,EAAE,YAAY;AAAA,gBAC/D;AACA,uBAAO,CAAC,GAAG,UAAU,GAAG,cAAc;AAAA,cACxC,CAAC;AAAA,YACH;AAEA,gBAAI,KAAK,aAAa;AACpB,oBAAM,aAAyB;AAAA,gBAC7B,cAAc,KAAK,YAAY,gBAAgB,QAAQ,KAAK,IAAI,CAAC;AAAA,gBACjE,WAAW,KAAK,YAAY,aAAa,KAAK,YAAY,QAAQ;AAAA,gBAClE,WAAW,KAAK,YAAY,aAAa,KAAK,YAAY,aAAa,CAAC;AAAA,gBACxE,YAAY,KAAK,YAAY,cAAc,KAAK,IAAI;AAAA,gBACpD,QAAQ;AAAA,cACV;AAEA,6BAAe,UAAQ;AACrB,sBAAM,WAAW,KAAK,OAAO,OAAK,EAAE,iBAAiB,WAAW,YAAY;AAC5E,uBAAO,CAAC,GAAG,UAAU,UAAU;AAAA,cACjC,CAAC;AAAA,YACH;AAAA,UACF,WAAW,cAAc,qBAAqB;AAE5C,oBAAQ,IAAI,uCAAuC,IAAI;AAGvD,gBAAI,KAAK,SAAS,MAAM,QAAQ,KAAK,KAAK,GAAG;AAC3C,oBAAM,qBAAsC,KAAK,MAC9C,OAAO,CAAC,SAAc,KAAK,WAAW,QAAQ,KAAK,WAAW,MAAS,EACvE,IAAI,CAAC,UAAe;AAAA,gBACnB,cAAc,KAAK,gBAAgB,QAAQ,KAAK,IAAI,CAAC;AAAA,gBACrD,WAAW,KAAK,aAAa,KAAK,QAAQ;AAAA,gBAC1C,WAAW,KAAK,aAAa,KAAK,aAAa,CAAC;AAAA,gBAChD,QAAQ,KAAK;AAAA,gBACb,OAAO,KAAK,mBAAmB;AAAA,gBAC/B,SAAS,KAAK,WAAW,CAAC;AAAA,gBAC1B,YAAY,KAAK,cAAc,KAAK,IAAI;AAAA,gBACxC,cAAc,KAAK,IAAI;AAAA,cACzB,EAAE;AAEJ,gCAAkB,UAAQ;AACxB,sBAAM,WAAW,KAAK;AAAA,kBAAO,OAC3B,CAAC,mBAAmB,KAAK,QAAM,GAAG,iBAAiB,EAAE,YAAY;AAAA,gBACnE;AACA,uBAAO,CAAC,GAAG,UAAU,GAAG,kBAAkB;AAAA,cAC5C,CAAC;AAGD,oBAAM,eAAe,mBAAmB,IAAI,OAAK,EAAE,YAAY;AAC/D,6BAAe,UAAQ,KAAK,OAAO,OAAK,CAAC,aAAa,SAAS,EAAE,YAAY,CAAC,CAAC;AAAA,YACjF,WAGS,KAAK,gBAAgB,KAAK,QAAQ;AACzC,oBAAM,gBAA+B;AAAA,gBACnC,cAAc,KAAK;AAAA,gBACnB,WAAW,KAAK,aAAa;AAAA,gBAC7B,WAAW,KAAK,aAAa,CAAC;AAAA,gBAC9B,QAAQ,KAAK;AAAA,gBACb,OAAO,KAAK,mBAAmB;AAAA,gBAC/B,SAAS,KAAK,WAAW,CAAC;AAAA,gBAC1B,YAAY,KAAK,cAAc,KAAK,IAAI;AAAA,gBACxC,cAAc,KAAK,IAAI;AAAA,cACzB;AAEA,gCAAkB,UAAQ;AACxB,sBAAM,WAAW,KAAK,OAAO,OAAK,EAAE,iBAAiB,cAAc,YAAY;AAC/E,uBAAO,CAAC,GAAG,UAAU,aAAa;AAAA,cACpC,CAAC;AAGD,6BAAe,UAAQ,KAAK,OAAO,OAAK,EAAE,iBAAiB,cAAc,YAAY,CAAC;AAAA,YACxF;AAAA,UACF;AAGA,cAAI,cAAc,gBAAgB,KAAK,OAAO;AAC5C,4BAAgB,CAAC,SAAS,CAAC,GAAG,MAAM,GAAG,KAAK,KAAK,CAAC;AAAA,UAEpD,WAAW,cAAc,cAAc,MAAM;AAC3C,4BAAgB,CAAC,SAAS,CAAC,GAAG,MAAM,IAAI,CAAC;AAGzC,kBAAM,OAAO,KAAK,UAAU,KAAK;AACjC,gBAAI,OAAO,SAAS,UAAU;AAC5B,2BAAa,IAAI;AAAA,YACnB;AAAA,UAEF,WAAW,QAAQ,OAAO,SAAS,UAAU;AAE3C,gBAAI,KAAK,SAAS,MAAM,QAAQ,KAAK,KAAK,GAAG;AAC3C,sBAAQ,IAAI,sCAAsC,KAAK,KAAK;AAE5D,8BAAgB,CAAC,SAAS;AACxB,sBAAM,WAAW,CAAC,GAAG,IAAI;AAGzB,qBAAK,MAAM,QAAQ,CAAC,SAAmB;AACrC,wBAAM,aAAa,SAAS;AAAA,oBAC1B,CAAC,MACC,EAAE,iBAAiB,KAAK,gBACxB,EAAE,cAAc,KAAK,aACrB,EAAE,cAAc,KAAK;AAAA,kBACzB;AAEA,sBAAI,CAAC,YAAY;AACf,6BAAS,KAAK;AAAA,sBACZ,MAAM,KAAK,QAAQ;AAAA,sBACnB,WAAW,KAAK,aAAa,KAAK,QAAQ;AAAA,sBAC1C,cACE,KAAK,gBACL,QAAQ,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC,CAAC;AAAA,sBAC/D,WACE,KAAK,cACJ,OAAO,KAAK,cAAc,YAAY,KAAK,cAAc,OACtD,KAAK,YACL,CAAC,MACL,CAAC;AAAA,sBACH,SAAS,KAAK,WAAW,KAAK,UAAU;AAAA,sBACxC,YAAY,KAAK,cAAc,KAAK,IAAI;AAAA,sBACxC,SAAS,KAAK,WAAW,EAAE,MAAM,EAAE;AAAA,oBACrC,CAAC;AAAA,kBACH;AAAA,gBACF,CAAC;AAED,uBAAO;AAAA,cACT,CAAC;AAAA,YACH;AAGA,gBAAI,KAAK,aAAa;AACpB,oBAAM,OAAiB,KAAK;AAC5B,8BAAgB,CAAC,SAAS;AACxB,sBAAM,aAAa,KAAK;AAAA,kBACtB,CAAC,MACC,EAAE,iBAAiB,KAAK,gBACxB,EAAE,cAAc,KAAK,aACrB,EAAE,cAAc,KAAK;AAAA,gBACzB;AAEA,oBAAI,CAAC,YAAY;AACf,yBAAO;AAAA,oBACL,GAAG;AAAA,oBACH;AAAA,sBACE,MAAM,KAAK,QAAQ;AAAA,sBACnB,WAAW,KAAK,aAAa,KAAK,QAAQ;AAAA,sBAC1C,cACE,KAAK,gBACL,QAAQ,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC,CAAC;AAAA,sBAC/D,WACE,KAAK,cACJ,OAAO,KAAK,cAAc,YAAY,KAAK,cAAc,OACtD,KAAK,YACL,CAAC,MACL,CAAC;AAAA,sBACH,SAAS,KAAK,WAAW,KAAK,UAAU;AAAA,sBACxC,YAAY,KAAK,cAAc,KAAK,IAAI;AAAA,sBACxC,SAAS,KAAK,WAAW,EAAE,MAAM,EAAE;AAAA,oBACrC;AAAA,kBACF;AAAA,gBACF;AAEA,uBAAO;AAAA,cACT,CAAC;AAAA,YACH;AAGA,gBACE,KAAK,oBACL,MAAM,QAAQ,KAAK,gBAAgB,KACnC,KAAK,iBAAiB,SAAS,GAC/B;AACA,sBAAQ,IAAI,2CAA2C,KAAK,gBAAgB;AAC5E,oBAAM,2BAA2B,KAAK,iBAAiB,IAAI,CAAC,cAAmB;AAAA,gBAC7E,WAAW,SAAS,YAAY,SAAS,aAAa;AAAA,gBACtD,aAAa,qBAAqB,SAAS,YAAY,SAAS,aAAa,WAAW,SAAS,eAAe,SAAS,UAAU;AAAA,gBACnI,SAAS,sBAAsB,SAAS,WAAW,EAAE;AAAA,gBACrD,OAAO,SAAS,SAAS,CAAC;AAAA,gBAC1B,OAAO,SAAS,SAAS;AAAA,gBACzB,YAAY,SAAS,cAAc,KAAK,IAAI;AAAA,cAC9C,EAAE;AACF,wCAA0B,wBAAwB;AAAA,YACpD;AAAA,UACF;AAAA,QACF;AAAA,QACA,CAAC,oBAAoB;AACnB,gBAAM,2BAA2B,gBAAgB,IAAI,CAAC,cAAmB;AAAA,YACvE,WAAW,SAAS,YAAY,SAAS,aAAa;AAAA,YACtD,aAAa,qBAAqB,SAAS,YAAY,SAAS,aAAa,WAAW,SAAS,eAAe,SAAS,UAAU;AAAA,YACnI,SAAS,sBAAsB,SAAS,WAAW,EAAE;AAAA,YACrD,OAAO,SAAS,SAAS,CAAC;AAAA,YAC1B,OAAO,SAAS,SAAS;AAAA,YACzB,YAAY,SAAS,cAAc,KAAK,IAAI;AAAA,UAC9C,EAAE;AACF,oCAA0B,wBAAwB;AAAA,QACpD;AAAA,QACA,CAAC,iBAAiB;AAEhB,gBAAM,eAAe,oBAAoB;AAEzC,gBAAM,cAAuB;AAAA,YAC3B,IAAI;AAAA,YACJ,SAAS;AAAA,YACT,QAAQ;AAAA,YACR,WAAW,oBAAI,KAAK;AAAA;AAAA,YACpB,OAAO,gBAAgB;AAAA,YACvB,iBAAiB,0BAA0B;AAAA,YAC3C;AAAA,YACA;AAAA,YACA,QAAQ,iBAAiB;AAAA,UAC3B;AAGA,sBAAY,CAAC,SAAS;AACpB,kBAAM,WAAW,KAAK,OAAO,CAAC,QAAQ,IAAI,OAAO,UAAU;AAC3D,mBAAO,CAAC,GAAG,UAAU,WAAW;AAAA,UAClC,CAAC;AAED,cAAI,YAAY;AACd,kBAAM,cAAc,aAAa;AAAA,cAC/B;AAAA,YACF;AAEA,kBAAM,mBAAmB,aAAa;AAAA,cACpC;AAAA,YACF;AAEA,kBAAM,kBAAkB,cAAc,CAAC,KAAK,mBAAmB,CAAC;AAChE,gBAAI,iBAAiB;AACnB,oBAAM,kBAA2B;AAAA,gBAC/B,IAAI,aAAa,KAAK,IAAI,CAAC;AAAA,gBAC3B,SAAS,aAAa,eAAe;AAAA;AAAA,gBACrC,QAAQ;AAAA,gBACR,WAAW,oBAAI,KAAK;AAAA,cACtB;AAEA,0BAAY,UAAQ,CAAC,GAAG,MAAM,eAAe,CAAC;AAAA,YAChD;AAAA,UACF;AAEA,cAAI,iBAAiB,CAAC,aAAa,cAAc,eAAe;AAC9D,yBAAa,YAAY;AACzB,kCAAsB,UAAU;AAChC,gBAAI,iBAAiB;AACnB,8BAAgB,YAAY;AAAA,YAC9B;AAAA,UACF;AAEA,uBAAa,KAAK;AAClB,iCAAuB,KAAK;AAC5B,8BAAoB,UAAU;AAC9B,0BAAgB,CAAC,CAAC;AAClB,yBAAe,CAAC,CAAC;AACjB,4BAAkB,CAAC,CAAC;AACpB,oCAA0B,CAAC,CAAC;AAC5B,2BAAiB,CAAC,CAAC;AACnB,6BAAmB,CAAC,CAAC;AAGrB,uBAAa;AAGb,cAAI,gBAAgB,SAAS,MAAM,gBAAgB,YAAY;AAC7D,uBAAW,MAAM;AACf,oBAAM,kBAAkB,gBAAgB;AACxC,kBAAI,iBAAiB;AACnB,oCAAoB,eAAe;AAAA,cACrC;AAAA,YACF,GAAG,GAAG;AAAA,UACR;AAEA,cAAI,mBAAmB;AACrB,8BAAkB;AAAA,UACpB;AAAA,QACF;AAAA,QACA,CAAC,iBAAiB;AAEhB,kBAAQ,MAAM,yBAAyB,YAAY;AACnD,uBAAa,KAAK;AAGlB,cAAI,eAAe;AACnB,cAAI;AACF,gBAAI,OAAO,iBAAiB,aAAa,aAAa,SAAS,GAAG,KAAK,aAAa,SAAS,YAAY,IAAI;AAE3G,oBAAM,YAAY,aAAa,MAAM,QAAQ;AAC7C,kBAAI,WAAW;AACb,+BAAe,KAAK,MAAM,UAAU,CAAC,CAAC;AAAA,cACxC;AAAA,YACF,WAAW,OAAO,iBAAiB,UAAU;AAC3C,6BAAe;AAAA,YACjB;AAAA,UACF,SAASC,IAAG;AAEV,oBAAQ,KAAK,kCAAkCA,EAAC;AAAA,UAClD;AAGA,cAAI,gBAAgB,aAAa,YAAY;AAC3C,gBAAI,aAAa,WAAW,SAAS,SAAS,KAAK,aAAa,eAAe,wBAAwB;AACrG,oCAAsB,IAAI;AAC1B;AAAA,YACF;AAGA,kBAAM,eAAe,aAAa,WAAW;AAC7C,kBAAM,cAAc,aAAa,eAAe,CAAC;AACjD,kBAAM,kBAAkB,aAAa,oBAAoB,CAAC;AAG1D,kBAAM,mBAA4B;AAAA,cAChC,IAAI,SAAS,KAAK,IAAI,CAAC;AAAA,cACvB,SAAS;AAAA,cACT,QAAQ;AAAA,cACR,WAAW,oBAAI,KAAK;AAAA,cACpB,OAAO,CAAC;AAAA,cACR,iBAAiB,CAAC;AAAA,YACpB;AAEA,wBAAY,CAAC,SAAS,CAAC,GAAG,MAAM,gBAAgB,CAAC;AAGjD,gBAAI,YAAY,SAAS,GAAG;AAC1B,sBAAQ,KAAK,sBAAsB,WAAW;AAAA,YAChD;AACA,gBAAI,gBAAgB,SAAS,GAAG;AAC9B,sBAAQ,KAAK,qBAAqB,eAAe;AAAA,YACnD;AAEA;AAAA,UACF;AAGA,cAAI,OAAO,iBAAiB,aAAa,aAAa,SAAS,SAAS,KAAK,aAAa,SAAS,SAAS,IAAI;AAC9G,kCAAsB,IAAI;AAC1B;AAAA,UACF;AAGA,gBAAM,sBAAsB,OAAO,iBAAiB,WAC/C,aAAa,SAAS,YAAY,KAAK,aAAa,SAAS,OAAO,IACnE,0EACA,aAAa,SAAS,YAAY,KAAK,aAAa,SAAS,SAAS,IACpE,qFACA,mFACJ;AAGJ,gBAAM,0BAAmC;AAAA,YACvC,IAAI,SAAS,KAAK,IAAI,CAAC;AAAA,YACvB,SAAS;AAAA,YACT,QAAQ;AAAA,YACR,WAAW,oBAAI,KAAK;AAAA,YACpB,OAAO,CAAC;AAAA,YACR,iBAAiB,CAAC;AAAA,UACpB;AAEA,sBAAY,CAAC,SAAS,CAAC,GAAG,MAAM,uBAAuB,CAAC;AAAA,QAC1D;AAAA,QACA;AAAA,MACF;AAGA,mBAAa,UAAU;AAAA,IACzB,SAAS,OAAO;AACd,cAAQ,MAAM,0BAA0B,KAAK;AAC7C,mBAAa,KAAK;AAGlB,UAAI,eAAe;AACnB,UAAI,yBAAyB;AAG7B,UAAI,SAAS,OAAO,UAAU,UAAU;AAEtC,YAAI,cAAc,SAAS,MAAM,YAAY,OAAO,MAAM,aAAa,UAAU;AAC/E,cAAI;AACF,kBAAM,YAAa,MAAM,SAAiB;AAG1C,gBAAI,aAAa,OAAO,cAAc,UAAU;AAC9C,kBAAI,UAAU,YAAY;AACxB,oBAAI,UAAU,WAAW,SAAS,SAAS,KAAK,UAAU,eAAe,wBAAwB;AAC/F,2CAAyB;AAAA,gBAC3B,OAAO;AACL,iCAAe,UAAU,WAAW;AAAA,gBACtC;AAAA,cACF,WAAW,UAAU,SAAS;AAC5B,+BAAe,UAAU;AAAA,cAC3B,WAAW,UAAU,QAAQ;AAE3B,oBAAI,OAAO,UAAU,WAAW,YAAY,UAAU,OAAO,SAAS;AACpE,iCAAe,UAAU,OAAO;AAChC,sBAAI,UAAU,OAAO,cAAc,UAAU,OAAO,WAAW,SAAS,SAAS,GAAG;AAClF,6CAAyB;AAAA,kBAC3B;AAAA,gBACF,WAAW,OAAO,UAAU,WAAW,UAAU;AAC/C,iCAAe,UAAU;AAAA,gBAC3B;AAAA,cACF;AAAA,YACF,WAAW,OAAO,cAAc,UAAU;AACxC,6BAAe;AAAA,YACjB;AAAA,UACF,SAAS,YAAY;AACnB,oBAAQ,KAAK,mCAAmC,UAAU;AAAA,UAC5D;AAAA,QACF,WAAW,aAAa,SAAS,OAAO,MAAM,YAAY,UAAU;AAClE,yBAAe,MAAM;AAAA,QACvB;AAAA,MACF,WAAW,OAAO,UAAU,UAAU;AACpC,uBAAe;AAAA,MACjB;AAGA,UAAI,0BACD,OAAO,iBAAiB,aACtB,aAAa,SAAS,SAAS,KAAK,aAAa,SAAS,SAAS,IAAK;AAC3E,8BAAsB,IAAI;AAC1B;AAAA,MACF;AAGA,UAAI,OAAO,iBAAiB,UAAU;AACpC,YAAI,aAAa,SAAS,YAAY,KAAK,aAAa,SAAS,OAAO,GAAG;AACzE,yBAAe;AAAA,QACjB,WAAW,aAAa,SAAS,YAAY,KAAK,aAAa,SAAS,SAAS,KAAK,aAAa,SAAS,SAAS,GAAG;AACtH,yBAAe;AAAA,QACjB,WAAW,aAAa,SAAS,OAAO,KAAK,aAAa,SAAS,WAAW,GAAG;AAC/E,yBAAe;AAAA,QACjB;AAAA,MACF;AAGA,YAAM,mBAA4B;AAAA,QAChC,IAAI,SAAS,KAAK,IAAI,CAAC;AAAA,QACvB,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,WAAW,oBAAI,KAAK;AAAA,QACpB,OAAO,CAAC;AAAA,QACR,iBAAiB,CAAC;AAAA,MACpB;AAEA,kBAAY,CAAC,SAAS,CAAC,GAAG,MAAM,gBAAgB,CAAC;AAAA,IACnD;AAAA,EACF;AAEA,QAAM,gBAAgB,CAAC,MAAgD;AACrE,QAAI,EAAE,QAAQ,WAAW,CAAC,EAAE,UAAU;AACpC,QAAE,eAAe;AACjB,8BAAwB,CAAC;AAAA,IAC3B;AAAA,EACF;AAEA,QAAM,uBAAuB,CAAC,YAAqB;AACjD,QAAI,QAAQ,WAAW,QAAQ;AAC7B,aAAO,gBAAAJ,KAAC,SAAI,WAAU,mCAAmC,kBAAQ,SAAQ;AAAA,IAC3E;AAEA,QAAI,QAAQ,QAAQ,WAAW,YAAY,GAAG;AAC5C,YAAMK,UAAS,QAAQ,QAAQ,QAAQ,cAAc,EAAE;AAEvD,aACE,gBAAAJ,MAAC,SAAI,WAAU,iBACb;AAAA,wBAAAD,KAAC,QAAG,WAAU,0CAAyC,0BAAY;AAAA,QACnE,gBAAAA,KAAC,OAAE,WAAU,wCAAuC,4DAEpD;AAAA,QACA,gBAAAC;AAAA,UAAC;AAAA;AAAA,YACC,IAAI,UAAUI,OAAM;AAAA,YACpB,WAAU;AAAA,YAEV;AAAA,8BAAAL,KAAC,UAAK,uBAAS;AAAA,cACf,gBAAAA,KAAC,cAAW,WAAU,WAAU;AAAA;AAAA;AAAA,QAClC;AAAA,SACF;AAAA,IAEJ;AAGA,UAAM,cAAc,MAAM;AACxB,YAAM,iBAAiB,QAAQ,UAAU,CAAC;AAE1C,UAAI,eAAe,WAAW,GAAG;AAC/B,eAAO;AAAA,MACT;AAEA,YAAM,aAAa;AAAA,QACjB;AAAA,QACA,QAAQ,WAAW;AAAA,QACnB;AAAA,MACF;AAEA,UAAI,WAAW,WAAW;AAAG,eAAO;AAEpC,aACE,gBAAAA,KAAC,SAAI,WAAU,aACb,0BAAAA;AAAA,QAAC;AAAA;AAAA,UACC,QAAQ;AAAA,UACR,aAAa;AAAA;AAAA,MACf,GACF;AAAA,IAEJ;AAGA,UAAM,wBAAwB,MAAM;AAClC,UAAI,CAAC,QAAQ,mBAAmB,QAAQ,gBAAgB,WAAW;AAAG,eAAO;AAE7E,aACE,gBAAAC,MAAC,SAAI,WAAU,yCACb;AAAA,wBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAQ;AAAA,YACR,MAAK;AAAA,YACL,SAAS,MACP,qBAAqB,CAAC,UAAU;AAAA,cAC9B,GAAG;AAAA,cACH,CAAC,QAAQ,EAAE,GAAG,CAAC,KAAK,QAAQ,EAAE;AAAA,YAChC,EAAE;AAAA,YAEJ,WAAU;AAAA,YAEV;AAAA,8BAAAD,KAACM,QAAA,EAAM,WAAU,WAAU;AAAA,cAC3B,gBAAAL,MAAC,UAAK;AAAA;AAAA,gBAAwB,QAAQ,gBAAgB;AAAA,gBAAO;AAAA,iBAAC;AAAA,cAC7D,kBAAkB,QAAQ,EAAE,IAC3B,gBAAAD,KAAC,aAAU,WAAU,WAAU,IAE/B,gBAAAA,KAACO,cAAA,EAAY,WAAU,WAAU;AAAA;AAAA;AAAA,QAErC;AAAA,QACC,kBAAkB,QAAQ,EAAE,KAC3B,gBAAAP,KAAC,SAAI,WAAU,aACZ,kBAAQ,gBAAgB,IAAI,CAAC,QAAQ,UACpC,gBAAAC;AAAA,UAAC;AAAA;AAAA,YAEC,WAAU;AAAA,YAEV;AAAA,8BAAAA,MAAC,SAAI,WAAU,0CACb;AAAA,gCAAAA,MAAC,SAAI,WAAU,2BACb;AAAA,kCAAAD,KAAC,UAAK,WAAU,uCACb,+BAAqB,OAAO,WAAW,OAAO,WAAW,GAC5D;AAAA,kBACC,OAAO,SACN,gBAAAA,KAAC,UAAK,WAAU,gEACb,iBAAO,OACV;AAAA,mBAEJ;AAAA,gBACC,OAAO,cACN,gBAAAA,KAAC,UAAK,WAAU,iCACb,UAAAQ,QAAO,IAAI,KAAK,OAAO,aAAa,GAAI,GAAG,UAAU,GACxD;AAAA,iBAEJ;AAAA,cAEA,gBAAAR,KAAC,SAAI,WAAU,2BACb,0BAAAA,KAACS,gBAAA,EAAc,YAAY,oBACxB,gCAAsB,OAAO,OAAO,GACvC,GACF;AAAA,cAEC,OAAO,SAAS,OAAO,MAAM,SAAS,KACrC,gBAAAR,MAAC,SAAI,WAAU,oCACb;AAAA,gCAAAA,MAAC,SAAI,WAAU,sCAAqC;AAAA;AAAA,kBACrC,OAAO,MAAM;AAAA,kBAAO;AAAA,mBACnC;AAAA,gBACA,gBAAAD,KAAC,SAAI,WAAU,aACZ,iBAAO,MAAM,IAAI,CAAC,MAAM,QACvB,gBAAAC;AAAA,kBAAC;AAAA;AAAA,oBAEC,WAAU;AAAA,oBAEV;AAAA,sCAAAA,MAAC,SAAI,WAAU,uCACZ;AAAA,6BAAK,kBACJ,gBAAAD,KAACU,UAAA,EAAQ,WAAU,wBAAuB,IAE1C,gBAAAV,KAACW,cAAA,EAAY,WAAU,0BAAyB;AAAA,wBAEjD,OAAO,KAAK,QAAQ,KAAK,aAAa,cAAc;AAAA,wBACpD,OAAO,KAAK,SAAS,SAAS,YAC7B,gBAAAV,MAAC,UAAK,WAAU,yBAAwB;AAAA;AAAA,0BACpC,OAAO,KAAK,QAAQ,IAAI,EAAE,QAAQ,CAAC;AAAA,0BAAE;AAAA,2BACzC;AAAA,yBAEJ;AAAA,uBACE,KAAK,UAAU,KAAK,WACpB,gBAAAD,KAAC,SAAI,WAAU,4DACZ,iBAAO,KAAK,UAAU,KAAK,MAAM,GACpC;AAAA;AAAA;AAAA,kBAnBG,eAAe,GAAG;AAAA,gBAqBzB,CACD,GACH;AAAA,iBACF;AAAA;AAAA;AAAA,UA3DG,GAAG,OAAO,SAAS,IAAI,KAAK;AAAA,QA6DnC,CACD,GACH;AAAA,SAEJ;AAAA,IAEJ;AAEA,QAAI,QAAQ,WAAW,QAAQ,QAAQ,SAAS,GAAG;AACjD,YAAM,2BAA2B,QAAQ,WAAW,SAC/C,QAAQ,mBAAmB,QAAQ,gBAAgB,SAAS,KAAK,QAAQ,QAAQ,SAAS,MACzF,QAAQ,UACR,oBAAoB,QAAQ,SAAS,QAAQ,eAAe,IAC9D,QAAQ;AAEZ,aACE,gBAAAC,MAAC,SAAI,WAAU,aACb;AAAA,wBAAAA,MAAC,SAAI,WAAU,8BAA6B;AAAA;AAAA,UACtC,QAAQ,QAAQ;AAAA,UAAO;AAAA,UAAM,QAAQ,QAAQ,SAAS,IAAI,MAAM;AAAA,UAAG;AAAA,WACzE;AAAA,QACC,sBAAsB;AAAA,QACtB,YAAY;AAAA,QACb,gBAAAD,KAACS,gBAAA,EAAc,YAAY,oBACxB,oCACH;AAAA,SACF;AAAA,IAEJ;AAGA,UAAM,kBAAkB,QAAQ,WAAW,SACtC,QAAQ,mBAAmB,QAAQ,gBAAgB,SAAS,KAAK,QAAQ,QAAQ,SAAS,MACzF,QAAQ,UACR,oBAAoB,QAAQ,SAAS,QAAQ,eAAe,IAC9D,QAAQ;AAEZ,WACE,gBAAAR,MAAC,SACE;AAAA,4BAAsB;AAAA,MACtB,YAAY;AAAA,MACb,gBAAAD,KAACS,gBAAA,EAAc,YAAY,oBACxB,2BACH;AAAA,OACF;AAAA,EAEJ;AAGA,YAAU,MAAM;AACd,QAAI,CAAC,iBAAiB;AACpB,qBAAe,SAAS,eAAe,EAAE,UAAU,SAAS,CAAC;AAAA,IAC/D;AAAA,EACF,GAAG,CAAC,UAAU,uBAAuB,CAAC;AAGtC,YAAU,MAAM;AACd,UAAM,gBAAgB,iBAAiB;AACvC,QAAI,CAAC;AAAe;AAEpB,UAAM,eAAe,MAAM;AACzB,YAAM,EAAE,WAAW,cAAc,aAAa,IAAI;AAClD,YAAM,eAAe,eAAe,YAAY,eAAe;AAE/D,UAAI,cAAc;AAChB,2BAAmB,KAAK;AAAA,MAC1B,OAAO;AACL,2BAAmB,IAAI;AACvB,+BAAuB,UAAU;AAAA,MACnC;AAAA,IACF;AAEA,kBAAc,iBAAiB,UAAU,YAAY;AACrD,WAAO,MAAM,cAAc,oBAAoB,UAAU,YAAY;AAAA,EACvE,GAAG,CAAC,CAAC;AAGL,YAAU,MAAM;AACd,gBAAY,SAAS,MAAM;AAAA,EAC7B,GAAG,CAAC,CAAC;AAGL,YAAU,MAAM;AACd,WAAO,MAAM;AACX,uBAAiB;AAAA,IACnB;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,QAAM,yBAAyB,CAAC,WAAiB,iBAAkC;AACjF,UAAM,MAAM,oBAAI,KAAK;AACrB,UAAM,WAAW,IAAI,QAAQ,IAAI,UAAU,QAAQ;AACnD,UAAM,mBAAmB,WAAW;AAGpC,QAAI,cAAc;AAElB,QAAI,iBAAiB,UAAa,SAAS,SAAS,GAAG;AACrD,YAAM,aAAa;AACnB,eAAS,IAAI,KAAK,IAAI,GAAG,eAAe,UAAU,GAAG,KAAK,KAAK,IAAI,SAAS,SAAS,GAAG,eAAe,UAAU,GAAG,KAAK;AACvH,YAAI,MAAM,gBAAgB,SAAS,CAAC,GAAG;AACrC,gBAAM,iBAAiB,SAAS,CAAC,EAAE;AACnC,gBAAM,iBAAiB,KAAK,IAAI,UAAU,QAAQ,IAAI,eAAe,QAAQ,CAAC;AAE9E,cAAI,iBAAiB,KAAQ;AAC3B,0BAAc;AACd;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGA,QAAI,aAAa;AACf,aAAOD,QAAO,WAAW,WAAW;AAAA,IACtC;AAGA,WAAOA,QAAO,WAAW,QAAQ;AAAA,EACnC;AAEA,QAAM,aAAa,CAAC,YAAoB;AACtC,cAAU,UAAU,UAAU,OAAO,EAAE,KAAK,MAAM;AAChD,gBAAU,sBAAsB;AAAA,IAClC,CAAC;AAAA,EACH;AAEA,QAAM,iCAAiC,MAAM;AAC3C,QAAI,CAAC,0BAA0B,uBAAuB,WAAW;AAAG,aAAO;AAE3E,WACE,gBAAAP,MAAC,SAAI,WAAU,yCACb;AAAA,sBAAAA;AAAA,QAAC;AAAA;AAAA,UACC,SAAQ;AAAA,UACR,MAAK;AAAA,UACL,SAAS,MAAM,oCAAoC,CAAC,gCAAgC;AAAA,UACpF,WAAU;AAAA,UAEV;AAAA,4BAAAD,KAACM,QAAA,EAAM,WAAU,WAAU;AAAA,YAC3B,gBAAAL,MAAC,UAAK;AAAA;AAAA,cAAwB,uBAAuB;AAAA,cAAO;AAAA,eAAC;AAAA,YAC5D,mCACC,gBAAAD,KAAC,aAAU,WAAU,WAAU,IAE/B,gBAAAA,KAACO,cAAA,EAAY,WAAU,WAAU;AAAA;AAAA;AAAA,MAErC;AAAA,MACC,oCACC,gBAAAP,KAAC,SAAI,WAAU,aACZ,iCAAuB,IAAI,CAAC,QAAQ,UACnC,gBAAAC;AAAA,QAAC;AAAA;AAAA,UAEC,WAAU;AAAA,UAEV;AAAA,4BAAAA,MAAC,SAAI,WAAU,0CACb;AAAA,8BAAAA,MAAC,SAAI,WAAU,2BACb;AAAA,gCAAAD,KAAC,UAAK,WAAU,uCACb,+BAAqB,OAAO,WAAW,OAAO,WAAW,GAC5D;AAAA,gBACC,OAAO,SACN,gBAAAA,KAAC,UAAK,WAAU,gEACb,iBAAO,OACV;AAAA,iBAEJ;AAAA,cACC,OAAO,cACN,gBAAAA,KAAC,UAAK,WAAU,iCACb,UAAAQ,QAAO,IAAI,KAAK,OAAO,UAAU,GAAG,UAAU,GACjD;AAAA,eAEJ;AAAA,YAEA,gBAAAR,KAAC,SAAI,WAAU,2BACb,0BAAAA,KAACS,gBAAA,EAAc,YAAY,oBACxB,gCAAsB,OAAO,OAAO,GACvC,GACF;AAAA,YAEC,OAAO,SAAS,OAAO,MAAM,SAAS,KACrC,gBAAAR,MAAC,SAAI,WAAU,oCACb;AAAA,8BAAAA,MAAC,SAAI,WAAU,sCAAqC;AAAA;AAAA,gBACrC,OAAO,MAAM;AAAA,gBAAO;AAAA,iBACnC;AAAA,cACA,gBAAAD,KAAC,SAAI,WAAU,aACZ,iBAAO,MAAM,IAAI,CAAC,MAAM,QACvB,gBAAAC;AAAA,gBAAC;AAAA;AAAA,kBAEC,WAAU;AAAA,kBAEV;AAAA,oCAAAA,MAAC,SAAI,WAAU,uCACZ;AAAA,2BAAK,kBACJ,gBAAAD,KAACU,UAAA,EAAQ,WAAU,wBAAuB,IAE1C,gBAAAV,KAACW,cAAA,EAAY,WAAU,0BAAyB;AAAA,sBAEjD,OAAO,KAAK,QAAQ,KAAK,aAAa,cAAc;AAAA,sBACpD,OAAO,KAAK,SAAS,SAAS,YAC7B,gBAAAV,MAAC,UAAK,WAAU,yBAAwB;AAAA;AAAA,wBACpC,OAAO,KAAK,QAAQ,IAAI,EAAE,QAAQ,CAAC;AAAA,wBAAE;AAAA,yBACzC;AAAA,uBAEJ;AAAA,qBACE,KAAK,UAAU,KAAK,WACpB,gBAAAD,KAAC,SAAI,WAAU,4DACZ,iBAAO,KAAK,UAAU,KAAK,MAAM,GACpC;AAAA;AAAA;AAAA,gBAnBG,yBAAyB,GAAG;AAAA,cAqBnC,CACD,GACH;AAAA,eACF;AAAA;AAAA;AAAA,QA3DG,GAAG,OAAO,SAAS,IAAI,KAAK;AAAA,MA6DnC,CACD,GACH;AAAA,OAEJ;AAAA,EAEJ;AAGA,SACE,gBAAAC,MAAC,SAAI,WAAU,+BAEb;AAAA,oBAAAD,KAAC,SAAI,WAAW,GAAG,aAAa,eAAe,EAAE,kBAC/C,0BAAAC,MAAC,SAAI,WAAW,2EAA2E,aAAa,yEAAyE,EAAE,IACjL;AAAA,sBAAAD,KAAC,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAcV;AAAA,MAGE,gBAAAA;AAAA,QAAC;AAAA;AAAA,UACC,KAAK;AAAA,UACL,WAAU;AAAA,UACV,OAAO,EAAE,gBAAgB,SAAS;AAAA,UAElC,0BAAAA,KAAC,SAAI,WAAW,qDAAqD,SAAS,WAAW,IAAI,8BAA8B,6BAA6B,IACrJ,8BAAoB,SAAS,WAAW,IACvC,gBAAAA,KAAC,SAAI,WAAU,2CACb,0BAAAA,KAACY,UAAA,EAAQ,WAAU,8CAA6C,GAClE,IACE,SAAS,WAAW,IACtB,gBAAAZ,KAAC,SAAI,WAAU,2CACb,0BAAAC,MAAC,SAAI,WAAU,+EACb;AAAA,4BAAAD,KAAC,QAAG,WAAU,+CAA8C,2CAE5D;AAAA,YACA,gBAAAA,KAAC,OAAE,WAAU,oBAAmB,kGAEhC;AAAA,aACF,GACF,IAEA,gBAAAC,MAAC,SAAI,WAAU,iCACZ;AAAA,qBAAS,IAAI,CAAC,SAAS,UACtB,gBAAAD,KAAC,SAAI,WAAW,QAAQ,QAAQ,WAAW,SAAS,gBAAgB,eAAe,wBACjF,0BAAAC,MAAC,SAAI,WAAW,QAAQ,QAAQ,WAAW,SAAS,qBAAqB,UAAU,+BAA+B,QAAQ,WAAW,SAAS,YAAY,EAAE,IAEzJ;AAAA,eAAC,cACA,gBAAAD;AAAA,gBAAC;AAAA;AAAA,kBACC,WAAW,iBAAiB,QAAQ,WAAW,SAAS,iBAAiB,cACvE;AAAA,kBAED,kBAAQ,WAAW,SAClB,OACE,gBAAAA,KAAC,UAAO,WAAU,oCAChB,0BAAAA,KAAC,kBAAe,WAAU,mDACvB,gBAAM,WAAW,CAAC,GAAG,YAAY,KAAK,KACzC,GACF,IAEA,gBAAAA,KAAC,UAAO,WAAU,oCAChB,0BAAAA,KAAC,kBAAe,WAAU,mDAAkD,eAE5E,GACF,IAGF,gBAAAA,KAAC,UAAO,WAAU,oCAChB,0BAAAA,KAAC,kBAAe,WAAW,qBAAqB,WAAW,IAAI,eAE/D,GACF;AAAA;AAAA,cAEJ;AAAA,cAIF,gBAAAC;AAAA,gBAAC;AAAA;AAAA,kBACC,WAAW,uEAAuE,QAAQ,WAAW,SAAS,wBAAwB,aAAa;AAAA,kBAEnJ;AAAA,oCAAAA,MAAC,SAAI,WAAU,2EACb;AAAA,sCAAAA,MAAC,UACE;AAAA,gCAAQ,WAAW,SAAS,QAAQ;AAAA,wBAAO;AAAA,wBAAI,uBAAuB,QAAQ,WAAW,KAAK;AAAA,yBACjG;AAAA,sBACA,gBAAAD;AAAA,wBAAC;AAAA;AAAA,0BACC,SAAS,MAAM,WAAW,QAAQ,OAAO;AAAA,0BACzC,OAAM;AAAA,0BACN,WAAU;AAAA,0BAEV,0BAAAA,KAAC,QAAK,WAAU,WAAU;AAAA;AAAA,sBAC5B;AAAA,uBACF;AAAA,oBAEC,qBAAqB,OAAO;AAAA;AAAA;AAAA,cAC/B;AAAA,eACF,GACF,CACD;AAAA,aAGC,aAAa,wBAAwB,gBAAgB,eAAe,yBAAyB,oBAAoB,EAAE,SAAS,KAC5H,gBAAAA,KAAC,SAAI,WAAW,0CACd,0BAAAC,MAAC,SAAI,WAAW,4CACb;AAAA,eAAC,cACA,gBAAAD,KAAC,SAAI,WAAU,8BACb,0BAAAA,KAAC,UAAO,WAAU,oCAChB,0BAAAA,KAAC,kBAAe,WAAW,qBAAqB,WAAW,IAAI,eAAC,GAClE,GACF;AAAA,cAEF,gBAAAC,MAAC,SAAI,WAAW,yCAAyC,aAAa,CAAC,sBAAsB,wBAAwB,aACnH,yDACA;AAAA,gCAAAA,MAAC,SAAI,WAAU,yCAAwC;AAAA;AAAA,kBAC7C,uBAAuB,oBAAI,KAAK,GAAG,SAAS,MAAM;AAAA,mBAC5D;AAAA,gBACC,+BAA+B;AAAA,gBAChC,gBAAAD;AAAA,kBAAC;AAAA;AAAA,oBACC,QAAQ,gBAAgB,eAAe,yBAAyB,oBAAoB;AAAA,oBACpF,aAAW;AAAA;AAAA,gBACb;AAAA,iBACF;AAAA,eACF,GACF;AAAA,YAID,aAAa,CAAC,2BACb,gBAAAC,MAAC,SAAI,WAAU,mGACZ;AAAA,eAAC,cACA,gBAAAD;AAAA,gBAAC;AAAA;AAAA,kBACC,WAAW,wEAAwE,WAAW;AAAA,kBAC9F,OAAO,EAAE,WAAW,gCAAgC;AAAA,kBAEpD,0BAAAA,KAACM,QAAA,EAAM,WAAU,kDAAiD;AAAA;AAAA,cACpE;AAAA,cAEF,gBAAAL,MAAC,SAAI,WAAU,+HACb;AAAA,gCAAAD;AAAA,kBAAC;AAAA;AAAA,oBACC,WAAU;AAAA,oBACV,OAAO;AAAA,sBACL,gBAAgB;AAAA,sBAChB,WAAW;AAAA,sBACX,mBAAmB;AAAA,oBACrB;AAAA;AAAA,gBACD;AAAA,gBACD,gBAAAC,MAAC,SAAI,WAAU,sCACb;AAAA,kCAAAA,MAAC,SAAI,WAAU,mCACb;AAAA,oCAAAD;AAAA,sBAAC;AAAA;AAAA,wBACC,WAAW,yCAAyC,WAAW;AAAA,wBAC/D,OAAO,EAAE,WAAW,kCAAkC;AAAA;AAAA,oBACvD;AAAA,oBACD,gBAAAA;AAAA,sBAAC;AAAA;AAAA,wBACC,WAAW,yCAAyC,WAAW;AAAA,wBAC/D,OAAO,EAAE,WAAW,uCAAuC;AAAA;AAAA,oBAC5D;AAAA,oBACD,gBAAAA;AAAA,sBAAC;AAAA;AAAA,wBACC,WAAW,yCAAyC,WAAW;AAAA,wBAC/D,OAAO,EAAE,WAAW,uCAAuC;AAAA;AAAA,oBAC5D;AAAA,oBACD,gBAAAA,KAAC,UAAK,WAAU,+CAA8C,yBAAW;AAAA,qBAC3E;AAAA,kBACA,gBAAAA,KAAC,UAAK,WAAU,iCAAgC,6CAA+B;AAAA,mBACjF;AAAA,iBACF;AAAA,eACF;AAAA,YAGF,gBAAAA,KAAC,SAAI,KAAK,gBAAgB;AAAA,aAC5B,GAEJ;AAAA;AAAA,MACF;AAAA,MAGA,gBAAAA,KAAC,SAAI,WAAU,iBACb,0BAAAC,MAAC,SAAI,WAAU,uDAEX;AAAA,uBAAc,SAAS,KAAK,gBAAgB,SAAS,MACrD,gBAAAD,KAAC,SAAI,WAAU,mDACb,0BAAAA,KAAC,SAAI,WAAU,wBACZ;AAAA,UACC,GAAG,cAAc;AAAA,YACf,CAAC,SAAS,CAAC,gBAAgB,KAAK,OAAK,EAAE,SAAS,KAAK,QAAQ,EAAE,SAAS,KAAK,IAAI;AAAA,UACnF;AAAA,UACA,GAAG;AAAA,QACL,EAAE,IAAI,CAAC,SAAS;AACd,gBAAM,UAAU,GAAG,KAAK,IAAI,IAAI,KAAK,IAAI;AACzC,gBAAM,aAAa,gBAAgB,KAAK,OAAK,EAAE,SAAS,KAAK,QAAQ,EAAE,SAAS,KAAK,IAAI;AACzF,iBACE,gBAAAC;AAAA,YAAC;AAAA;AAAA,cAEC,WAAU;AAAA,cAEV;AAAA,gCAAAD,KAAC,aAAU,WAAU,4CAA2C;AAAA,gBAChE,gBAAAC,MAAC,SAAI,WAAU,+BACb;AAAA,kCAAAD,KAAC,UAAK,WAAU,YAAY,eAAK,MAAK;AAAA,kBACrC,eAAe,OAAO,MAAM,UAAa,CAAC,cACzC,gBAAAA,KAAC,SAAI,WAAU,uDACb,0BAAAA;AAAA,oBAAC;AAAA;AAAA,sBACC,WAAU;AAAA,sBACV,OAAO,EAAE,OAAO,GAAG,eAAe,OAAO,CAAC,IAAI;AAAA;AAAA,kBAChD,GACF;AAAA,mBAEJ;AAAA,gBACC,cACC,gBAAAA;AAAA,kBAAC;AAAA;AAAA,oBACC,MAAK;AAAA,oBACL,UACE,aAAa,OAAO,OAAO,cAAc,EAAE,KAAK,CAAC,YAAY,UAAU,GAAG;AAAA,oBAE5E,SAAS,MACP;AAAA,sBAAmB,CAAC,SAClB,KAAK,OAAO,CAAC,MAAM,EAAE,SAAS,KAAK,QAAQ,EAAE,SAAS,KAAK,IAAI;AAAA,oBACjE;AAAA,oBAEF,WAAW,gBAAgB,aAAa,OAAO,OAAO,cAAc,EAAE,KAAK,CAAC,MAAM,IAAI,GAAG,IACrF,qCACA,iCACF;AAAA,oBACH;AAAA;AAAA,gBAED;AAAA;AAAA;AAAA,YAhCG;AAAA,UAkCP;AAAA,QAEJ,CAAC,GACH,GACF;AAAA,QAGF,gBAAAC;AAAA,UAAC;AAAA;AAAA,YACC,UAAU;AAAA,YACV,WAAW,wFAAwF,aAAa,KAAK,MAAM;AAAA,YAG3H;AAAA,8BAAAD;AAAA,gBAAC;AAAA;AAAA,kBACC,KAAK;AAAA,kBACL,WAAU;AAAA,kBAEV,aAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,SAAS;AAAA,kBACT,OAAO;AAAA,kBACP,UAAU,CAAC,MAAM,SAAS,EAAE,OAAO,KAAK;AAAA,kBACxC,WAAW;AAAA;AAAA,cACb;AAAA,cAGA,gBAAAC,MAAC,SAAI,WAAU,kCAEb;AAAA,gCAAAA,MAAC,SACC;AAAA,kCAAAD;AAAA,oBAAC;AAAA;AAAA,sBACC,SAAQ;AAAA,sBACR,WAAW;AAAA;AAAA,sBAEX,YAAY,sDAAsD,gBAAgB;AAAA,sBAClF,cAAW;AAAA,sBAEX,0BAAAA,KAAC,UAAK,WAAU,gCAA+B,oBAAC;AAAA;AAAA,kBAClD;AAAA,kBACA,gBAAAA;AAAA,oBAAC;AAAA;AAAA,sBACC,MAAK;AAAA,sBACL,UAAQ;AAAA,sBACR,IAAG;AAAA,sBACH,OAAM;AAAA,sBACN,WAAU;AAAA,sBACV,UAAU;AAAA,sBACV,UAAU,OAAO,MAAM;AACrB,4BAAI,EAAE,OAAO,SAAS,EAAE,OAAO,MAAM,SAAS,GAAG;AAC/C,gCAAM,WAAW,KAAK,OAAO;AAC7B,gCAAM,WAAW,MAAM,KAAK,EAAE,OAAO,KAAK;AAG1C,gCAAM,gBAAgB,SAAS,OAAO,CAAC,SAAS,KAAK,OAAO,QAAQ;AACpE,gCAAM,eAAe,SAAS,OAAO,CAAC,SAAS,KAAK,QAAQ,QAAQ;AAGpE,8BAAI,cAAc,SAAS,GAAG;AAC5B,kCAAM,UAAU,cACb,IAAI,CAAC,SAAS,UAAK,KAAK,IAAI,0BAA0B,EACtD,KAAK,IAAI;AAEZ,sCAAU,OAAO;AAAA,0BACnB;AAGA,8BAAI,aAAa,WAAW,GAAG;AAC7B,8BAAE,OAAO,QAAQ;AACjB;AAAA,0BACF;AAEA,gCAAM,eAAe,IAAI;AAAA,4BACvB,gBAAgB,IAAI,CAAC,MAAM,GAAG,EAAE,IAAI,IAAI,EAAE,IAAI,EAAE;AAAA,0BAClD;AAEA,gCAAM,gBAAgB,aAAa;AAAA,4BACjC,CAAC,SAAS,CAAC,aAAa,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,IAAI,EAAE;AAAA,0BACzD;AAEA,8BAAI,cAAc,WAAW,GAAG;AAC9B,8BAAE,OAAO,QAAQ;AACjB;AAAA,0BACF;AAEA,2CAAiB,aAAa;AAE9B,gCAAM,SAAS,MAAM,YAAY;AAAA,4BAC/B;AAAA,4BACA;AAAA,4BACA;AAAA,4BACA,CAAC,SAAS,YAAY;AACpB,kCAAI,YAAY,IAAI;AAClB;AAAA,kCAAiB,CAAC,SAChB,KAAK,OAAO,CAAC,MAAM,GAAG,EAAE,IAAI,IAAI,EAAE,IAAI,OAAO,OAAO;AAAA,gCACtD;AAAA,8BACF,OAAO;AACL,kDAAkB,CAAC,UAAU;AAAA,kCAC3B,GAAG;AAAA,kCACH,CAAC,OAAO,GAAG;AAAA,gCACb,EAAE;AAAA,8BACJ;AAAA,4BACF;AAAA,4BACA;AAAA,0BACF;AAEA,8BAAI,QAAQ,MAAM,cAAc,CAAC,WAAW;AAC1C,kCAAM,eAAe,OAAO,KAAK;AACjC,yCAAa,YAAY;AACzB,yCAAa,UAAU;AAAA,0BACzB;AAEA,gCAAM,WAAW,QAAQ,MAAM,oBAAoB,CAAC;AACpD,gCAAM,SAAS,SAAS,IAAI,CAAC,UAAe;AAAA,4BAC1C,IAAI,KAAK;AAAA,4BACT,MAAM,KAAK;AAAA,4BACX,MAAM,KAAK;AAAA,0BACb,EAAE;AAEF,6CAAmB,CAAC,SAAS,CAAC,GAAG,MAAM,GAAG,MAAM,CAAC;AACjD;AAAA,4BAAiB,CAAC,SAChB,KAAK;AAAA,8BACH,CAAC,MACC,CAAC,OAAO,KAAK,CAAC,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI;AAAA,4BAC9D;AAAA,0BACF;AACA,4CAAkB,CAAC,CAAC;AACpB,4BAAE,OAAO,QAAQ;AAAA,wBACnB;AAAA,sBACF;AAAA;AAAA,kBACF;AAAA,mBACF;AAAA,gBAGA,gBAAAA,KAAC,SACC,0BAAAA;AAAA,kBAAC;AAAA;AAAA,oBACC,MAAK;AAAA,oBACL,UAAU,aAAa,CAAC,MAAM,KAAK;AAAA,oBACnC,WAAW;AAAA,sBACX,YAAY,kCAAkC,EAAE;AAAA,oBAChD,cAAW;AAAA,oBAEV,sBACC,gBAAAA,KAACY,UAAA,EAAQ,WAAU,iDAAgD,IAEnE,gBAAAZ,KAAC,QAAK,WAAU,oCAAmC;AAAA;AAAA,gBAEvD,GACF;AAAA,iBACF;AAAA;AAAA;AAAA,QACF;AAAA,SACF,GACF;AAAA,OACF,GACF;AAAA,IAGA,gBAAAA,KAAC,eAAY,MAAM,oBAAoB,cAAc,uBACnD,0BAAAC,MAAC,sBAAmB,WAAU,sCAC5B;AAAA,sBAAAD,KAAC,qBACC,0BAAAC,MAAC,oBAAiB,WAAU,iEAC1B;AAAA,wBAAAD,KAAC,eAAY,WAAU,wBAAuB;AAAA,QAAE;AAAA,SAElD,GACF;AAAA,MACA,gBAAAA,KAAC,0BAAuB,WAAU,sBAAqB,0FAEvD;AAAA,MACA,gBAAAC,MAAC,qBAAkB,WAAU,QAC3B;AAAA,wBAAAD,KAAC,qBAAkB,WAAU,gEAA+D,oBAE5F;AAAA,QACA,gBAAAA,KAAC,qBAAkB,SAAO,MACxB,0BAAAA,KAAC,UAAO,WAAU,qDAAoD,SAAO,MAC3E,0BAAAA,KAAC,QAAK,IAAG,YAAW,8BAAgB,GACtC,GACF;AAAA,SACF;AAAA,OACF,GACF;AAAA,IAEA,gBAAAA,KAAC,eAAY;AAAA,KACf;AAEJ;","names":["useState","ReactMarkdown","Loader2","Users","ChevronDown","CheckCircle","XCircle","format","React","jsx","React","jsx","jsx","React","jsx","jsxs","jsx","content","ReactMarkdown","jsx","jsx","jsxs","useState","memberResponses","e","teamId","Users","ChevronDown","format","ReactMarkdown","XCircle","CheckCircle","Loader2"]}